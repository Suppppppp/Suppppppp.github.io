[ { "title": "(100days Of Swfit) Day1 Test:Strings and integers 번역", "url": "/posts/100days_SubPage_day1_TestStringAndintegers_ko/", "categories": "IOS, 100days Of Swfit - Subpages", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-03 02:03:00 +0900", "snippet": "integer를 생성하는 코드를 고르세요1번Option 1:var mortgageRemaining = 100_000Option 2:var dogBreed = &quot;samoyed&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. mortgageRemaining 이라고 불리는 integer 변수가 생성됩니다.option2는 dogBreed 라고 불리는 변수가 생성되며 string 타입입니다. 2번Option 1:var speed = 88Option 2:var age = &quot;23&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. speed 이라고 불리는 integer 변수가 생성됩니다.option2는 비록 “ “안에 숫자가 있더라도 age 라고 불리는 변수가 생성되며 string 타입입니다. “ “ 안의 내용은 모두 string으로 취급됩니다. 3번Option 1:var repeatCount = 82Option 2:var selectedWood = &quot;mahogany&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. repeatCount 이라고 불리는 integer 변수가 생성됩니다.option2는 selectedWood 라고 불리는 변수가 생성되며 string 타입입니다. 4번Option 1:var highScore = 328_556Option 2:var sizeInInches = &quot;27&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. highScore 이라고 불리는 integer 변수가 생성됩니다.option2는 비록 “ “안에 숫자가 있더라도 sizeInInches 라고 불리는 변수가 생성되며 string 타입입니다. “ “ 안의 내용은 모두 string으로 취급됩니다. 5번Option 1:var currentSong = &quot;Rainbow to the Stars&quot;Option 2:var power = 9001 💡 정답 정답은 1번입니다.option1은 currentSong 라고 불리는 변수가 생성되며 string 타입입니다.option2는 정답입니다. power 이라고 불리는 integer 변수가 생성됩니다. 6번Option 1:var winner = &quot;Miguel&quot;Option 2:var rating = 5 💡 정답 정답은 1번입니다.option1은 winner 라고 불리는 변수가 생성되며 string 타입입니다.option2는 정답입니다. rating 이라고 불리는 integer 변수가 생성됩니다. 돌아가기⬅️ Day 1 돌아가기🏠 Main page 돌아가기" }, { "title": "(100days Of Swfit) Day1 Str&amp;Int - Option 번역", "url": "/posts/100days_SubPage_day1_Opt_StrInt_ko.md/", "categories": "IOS, 100days Of Swfit - Subpages", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-03 02:02:00 +0900", "snippet": "Why is Swift a type-safe language?Xcode 13.2버전으로 업데이트됨Swift는 Strings와 integers로서 변수를 만들게 해주지만 다른 많은 데이터의 타입들도 있습니다. 당신이 변수를 만들 때 Swift는 당신이 할당한 데이터가 어떤 종류인지에 따라서 어떤 타입의 변수인지 알 수 있고, 그 때 변수는 항상 한가지의 특정한 타입을 가질 것입니다.예를 들면,아래는 42와 동일한 meaningOfLife 라는 변수가 생성됩니다. :var meaningOfLife = 42왜냐하면 meaningOfLife 의 초기값으로 우리는 42를 할당했기 때문에 Swift는 Type을 integer로 할당할 것입니다.이것은 우리가 필요할 때마다 값을 자주 바꿀 수 있는 변수이지만, type을 바꿀 수는 없습니다. :이것의 type은 항상 Integer일 것입니다.이것은 App을 만들 때 매우 유용합니다. 왜냐하면 Swift는 우리의 데이터에 실수하지 않도록 확실히 할 것이기 때문입니다.예를 들어 우리는 이렇게 쓸수 없습니다.:meaningOfLife = &quot;Forty two&quot;비록 우리가 명백한 실수를 하는 것은 거의 없지만, 당신은 이 type safety(타입 안정성)가 Swift로 코드를 작성하는 날마다 도움을 주는 것을 알게 될 것입니다.셍긱해보세요 : 변수를 하나 만들고 그 변수에 명백하게 실패할 타입을 변화시키려고 합니다.(잘못된 변환을 하려고 한다고 가정)하지만 당신의 프로그램이 크기가 커지고 복잡성이 증가함에 따라, 매번 당신의 머리안에 변수들의 타입을 외우고 있는 것이 불가능하게 됩니다. 그래서 대신에 Swift로 효과적으로 변환시키고 있습니다.돌아가기⬅️Day 1 돌아가기🏠Main page 돌아가기" }, { "title": "(100days Of Swfit) Day1 String and Integers 번역", "url": "/posts/100days_SubPage_day1_StringAndintegers_ko/", "categories": "IOS, 100days Of Swfit - Subpages", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-03 02:01:00 +0900", "snippet": "Swift는 모든 변수가 하나의 명확한 타입을 가져야만하는 typs-safe 언어로 알려져있습니다.Xcode가 우리를 위해 만들어준 Str 변수는 “Hellow, playground” 철자를 가진 문자열을 보유하고 있으므로 Swift는 String 타입을 할당합니다.반면에, 만약 우리가 누군가의 나이를 저장하길 원한다면 우리는 변수를 이렇게도 만들 수 있습니다. :var age = 38이 변수는 숫자를 가지는데 Swift는 Int 타입을 할당합니다 - “integer”를 줄인겁니다.만약 당신이 큰 숫자를 넣는다면, Swift는 천단위 구분자로 “_“를 사용할 수 있습니다. - 이것은 숫자를 바꾸지 않지만 더 쉽게 읽을 수 있습니다.(가독성측면)예를 들어:var population = 8_000_000(이렇게 입력했을 때 아래 비교사진을 보면 변수 할당시 _를 사용했지만 실제 할당되는건 8000000으로 둘이 같습니다.)Strings와 intergers는 다른 타입이고 서로 섞어 쓸 수 없습니다. 그래서 str 을 “Goodbye”로 바꾸는 것은 안전하지만 38로 바꿀수는 없습니다. 왜냐하면 Int 는 String 이 아니기 때문입니다.코드로 부연설명var str = &quot;Hello, playground&quot; //에서 str = &quot;Goodbye&quot; //로 바꾸는 것은 같은 str이라서 안전하지만str = 38 //로 바꾸는 것은 String에서 -&amp;gt; Integer 타입으로 바꾸는 것이기 때문에 불가능하다.돌아가기⬅️Day 1 돌아가기🏠Main page 돌아가기" }, { "title": "(100days Of Swfit) Day1 Test:Variables 번역", "url": "/posts/100days_SubPage_day1_TestVariables_ko/", "categories": "IOS, 100days Of Swfit - Subpages", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-03 01:03:00 +0900", "snippet": "1번Option 1:message = &quot;Good morning, Dave!&quot;Option 2:var operatingSystem = &quot;macOS&quot; 💡 정답 정답은 2번입니다.option1은 새 변수를 만들기 위해서는 var와 함께 시작해야합니다 var message = “Good morning, Dave!”option2는 정답입니다. operatingSystem이라고 불리는 변수가 생성됩니다. 2번Option 1:var address = &quot;321 Park Lane&quot;Option 2:favoriteColor = &quot;heliotrope&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. address라고 불리는 변수가 생성됩니다.option2가 새 변수를 만들기 위해서 var와 함께 시작해야합니다 var favoriteColor = “heliotrope” 3번Option 1:var dinosaur = &quot;T-Rex&quot;Option 2:city = &quot;Paris&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. dinosaur 불리는 변수가 생성됩니다.option2가 새 변수를 만들기 위해서는 var와 함께 시작해야합니다 var city = “Paris” 4번Option 1:var pirate = &quot;LeChuck&quot;Option 2:spaceship = &quot;Nostromo&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. pirate 불리는 변수가 생성됩니다.option2가 새 변수를 만들기 위해서는 var와 함께 시작해야합니다 var spaceship = “Nostromo” 5번Option 1:status = &quot;success&quot;Option 2:var name = &quot;Sophie&quot; 💡 정답 정답은 2번입니다.option1가 새 변수를 만들기 위해서는 var와 함께 시작해야합니다 var status = “success”option2는 정답입니다. name라고 불리는 변수가 생성됩니다. 6번Option 1:var str = &quot;Hello, playground&quot;Option 2:user = &quot;twostraws&quot; 💡 정답 정답은 1번입니다.option1은 정답입니다. str 불리는 변수가 생성됩니다.option2가 새 변수를 만들기 위해서는 var와 함께 시작해야합니다 var user = “twostraws” 돌아가기⬅️Day 1 돌아가기🏠Main page 돌아가기" }, { "title": "(100days Of Swfit) Day1 Varibales - Option 번역", "url": "/posts/100days_SubPage_day1_Opt_Var_ko/", "categories": "IOS, 100days Of Swfit - Subpages", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-03 01:02:00 +0900", "snippet": "Why does Swift have variables?(Swift는 왜 변수variable을 가질까?)Xcode 13.2버전으로 업데이트 됨변수들은 우리의 프로그램의 임시적인 정보를 저장할 수 있게 해주며 거의 모든 Swsift프로그램의 핵심부분을 구성합니다.궁극적으로, 당신의 프로그램은 어떻게든 데이터를 변화시킬 것입니다. :아마 사용자에게 todo list 기능을 입력하게 한 후 그것들의 check를 꺼버릴 수도 있고,자본주의 너구리를 무인도에서 배회하게 할 수 도 있고(동물의 숲이란 게임을 비유한 것입니다.),장치의 시간을 읽고 시계에 표시할 수도 있습니다.어쨌든,당신은 어떤 종류의 데이터를 가져와서 어떻게든 변환해서 사용자에게 보여주는 것입니다.물론, “어떤방식으로든 변환해서”는 진정한 마법이 일어나는 부분인데, 왜냐하면 그 부분이 당신의 기발한 app idea가 일어나는 부분이기 때문입니다.하지만 메모리에 데이터를 저장하는 프로세스는–(사용자가 입력한 내용이나,인터넷으로부터 다운받은 무언가를 보관하는 것)–변수가 필요한 내용입니다.당신이 var를 사용해서 변수를 만들면, var를 다시 사용할 필요없이 원하는 만큼 바꿀 수 있습니다.예를 들면:var favoriteShow = &quot;Orange is the New Black&quot;favoriteShow = &quot;The Good Place&quot;favoriteShow = &quot;Doctor Who&quot;만약 var를 읽을 때 “새로운 변수만들기”로서 var를 읽는 것이 도움이 된다면 그렇게 읽어보세요.그래서 위의 첫번째 라인은 “favoriteShow라는 새로운 변수 만들고 Orange is the New Black이라는 값을 넣어주기”로서 읽을 수 있습니다.line 2과 line 3은 var를 가지지 않고 새로운 변수를 만들기보다 존재하는 값을 최신화합니다.이제 상상해보세요. 당신은 3개의 모든 line에 var를 가졌습니다.(var favoriteShow 를 각 line에 사용했다고 가정합니다.)말이 되지 않을 것입니다, 왜냐하면 첫번째 시도 후에는 명백하게 새로운 변수가 아니므로 “favoriteShow라는 새로운 변수 만들기 “를 3번 말하는 것은 말이 안되기 때문입니다.Swift는 당신이 변수에대해 다른 이름을 고를때까지 코드가 실행되되지 않도록 error로 표시할 겁니다.이건 짜증나는 행동일지도 모르지만 절 믿으세요 : 이건 매우 유용합니다! Swift는 다음처럼 당신한테 명백하게 하길 원합니다: 기존에 존재하는 변수에 대해 수정하려고 합니까? (만약 그렇다면 2번째와 그 후에var제거), 또는 새로운 변수를 생성하려고 합니까? (여기서는 변수를 다른 이름으로 )마지막 1가지 : 비록 대부분의 변수가 Swift프로그램의 핵심을 구성할지라도, 당신은 때떄로 변수들을 가장 피해야한다는 것을 배울 것입니다. 자세한 내용은 나중에 더 하겠습니다. ⬅️Day 1 돌아가기🏠Main page 돌아가기" }, { "title": "(100days Of Swfit) Day1 Variables 번역", "url": "/posts/100days_SubPage_day1_Var_ko/", "categories": "IOS, 100days Of Swfit - Subpages", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-02 01:01:00 +0900", "snippet": "(아래 글은 영상에 대한 자막이므로 리스닝이 힘드실 경우 아래를 보시면 됩니다.)Xcode를 실행할 때 무엇을 하고 싶은지 물어보는데 “Get Started with a Playground”를 선택해주면 됩니다.(영상의 버전은 9.2버전으로 현재 Xcode버전과는 동떨어져 있어서 13.2버전기준으로 추가 설명과 사진을 넣어놓겠습니다.) Xcode설치 및 13.2버전 playground열기 100days에서처럼 App stroe에서 Xcode를 설치하는 것이 아니라 공식 홈페이지에서 다운방법은 예전 제 글을 참고해주세요. Playground 여는 방법 – 이것은 Swift 코드를 입력하고 즉각적으로 결과를 볼 수 있는 Sandbox입니다.기본 값(default)은 ios용 비어있는 playground로 next를 클릭해서 만들고 당신의 desktop에 저장하세요.이 동영상에서 프로그램 데이터를 저장할 수 있는 변수(Variable)를 소개하겠습니다.이것들은 변수(Variable)라고 불립니다. 왜냐하면 변수들은 다양하기 때문입니다. – 당신은 변수 값들을 자유롭게 바꿀 수 있습니다.Playgrounds는 변수를 만드는 코드 명령줄과 함께 시작합니다.:var str = &quot;Hello, playground&quot;그러면 str이라는 변수(variable)이 만들어지고 “Hello, Palyground”라는 값이 지정됩니다.playground 오른쪽에 있는 결과 출력창(ouput area)에 “Hello, playground”를 볼 수 있습니다 - 이것은 값(value)이 설정된 것을 보여주는 Xcode입니다.왜냐하면 str은 우리가 변하게 할 수 있는 변수입니다.str = &quot;Goodbye&quot;2번째에서는 var가 필요없는데 변수(var)가 이미 만들어졌기 때문입니다. - 그냥 바꾸기만 하면됩니다.⬅️Day 1 돌아가기🏠Main page 돌아가기" }, { "title": "(100days Of Swfit) Main page 번역", "url": "/posts/100days_MainPage_ko/", "categories": "IOS, 100days Of Swfit - Days N", "tags": "ios, 100days Of Swfit", "date": "2022-02-01 01:01:00 +0900", "snippet": "IOS를 공부하기로 마음먹으면서 자료조사를 해보았고 여러 자료들을 추천하는 글들을 보았습니다.그 중 유투브나 여러 자료들을 보았지만 ios에 완전히 처음인 저는 체계적인 공부방식이 필요했고 다양한 자료들 중 몇 가지를 찾았습니다.이 100days of Swift는 그 중 1가지로 기초부터 체계적으로 하루에 1개씩 공부하게 만들어졌으며 개념과 퀴즈가 같이 있고 무료라는 점이 좋았습니다. 물론 영어는 힘이 들지만 어차피 개발을 공부하는 사람은 영어와 뗄 수가 없으므로 이번 기회에 굳어졌던 영어공부도 하는 겸해서 진행해보려 했습니다.개인이 만든 사이트이기 때문에 부족한 내용과 보충 설명이 필요한 내용은 swift공식문서와 병행하면서 같이 보았습니다.단순히 공부를 하는 것보다 직접 번역을 하는 것이 제게 더 좋을 것 같아 번역을 하며 공부를 할 목적으로 글을 작성하게 되었습니다. 좋지 않은 영어실력으로 인해 오역될 수 있으므로 잘못된 점을 발견할 경우 가감없이 말씀해주시면 수정하도록 하겠습니다. 그럼 시작하도록 하겠습니다.Main PageHow it works100 Days of Swift에 오신 것을 환영합니다.여기는 Hacking with Swift에 대한 제 작업들에서 가져온 동영상, 튜토리얼, 테스트등의 무료 모음집이고 여러분이 swift를 배울 수 있게 설계되었습니다.실제 iOS 앱을 빌드하는 방법을 배우고 싶지만 목표를 달성하는 데 도움이 될 수 있는 좋은 무료 코스를 찾는 데 어려움을 겪는 초보자를 대상으로 합니다. 만약 당신이라면 환영합니다. - 당신의 진짜 모습1을 IOS세계를 보여줄 준비가 되어있기를 바랍니다.Rules만약 이 과정을 성공적으로 완주하길 원한다면 딱 2가지만 지키세요 매일 1시간씩 Swift 튜토리얼을 보거나 읽고 아니면 Swift 코드를 작성하세요 당신이 선택한 Social media(facebook, twitter 등)에 당신에 진행상황을 포스팅하세요. 사람들에게 얘기하세요!저는 따라가는 데 필요한 모든 자료를 제공할테니, 당신이 할일은 배울 준비된 상태로 나타나기만 하면 됩니다.TipsSwift를 배우려고 시도했다가 실패하는 많은 사람들을 자주 만나왔습니다. 만약 당신이 여기에 해당한다면 이미 잘못된 시작을 몇 번 했을 가능성이 큽니다.이번은 아닙니다. 이번 기회에 당신은 진짜 Swift에 대해 배울 것이고, 100일동안 당신이 자랑스러워 할 수 있는 몇 종류의 full app들을 만들어 볼 것입니다.당신은 이미 100days의 2가지 규칙을 읽었지만 이 코스의 기회를 최대한 활용하기 위해서 몇 가지 팁을 드릴게요 : 마라톤이에요 단거리가 아닙니다. 빨리 배워야한다는 생각으로 돌진하지 마세요. 2 왜냐하면 이건 길을 잃게 될 큰 요인입니다.자신만의 시간을 가지고 공부하세요 “Shiny object syndrome”3의 희생양이 되지 마세요 저도 압니다. 다른 코스에서 50$을 쓰는 유혹은 큽니다. 하지만 당신을 책을 사면 아무것도 배우지 못합니다.당신의 성공적인 최고의 기회는 이곳에 나와있는 100days와 함께하며 실제로 이루는 것입니다. 고독한 늑대가 되지 마세요 당신은 혼자서 배우는 게 아닙니다 - 많은 사람들처럼 돕기 위해 제가 여기 있습니다.만약 질문이 있다면, tweet me at @twostraws하세요. 최선을 다해서 도와드릴게요! Consolidation days4을 사용하세요 100일동안 간격을 두고 당신에게 무엇을 배웠는지 정말로 몰입 할 수 있는 복습할 시간을 주세요.당신이 확실히 알지 못하는 날로 돌아가거나, 놓친 숙제를 마치거나, 자유롭게 코딩할 때 이 시간들을 사용하세요. 당신이 쉽게 참조할 수 있도록 북마크 해놓아야하는 common Swift terms용어 목록입니다. Download my Unwrap app from the App Store.iPhone and iPad에서 동작하며, 이 코스의 처음 12일과 많은 보너스 활동이 포함되어 있습니다. 앱 내의 구매 없이 무료입니다.The CourseDays 1-12: Introduction to Swift처음 12일동안 swift를 가볍게 배우는 내용을 제공합니다.당신은 매일 1분짜리 동영상을 선택해서 보고 각 동영상에 대한 짧은 퀴즈를 풀어볼 것입니다.제가 공부를 하나씩 할때마다 day가 추가 될 예정입니다. Day 1 - 변수, 간단한 데이터 타입, string interpolation(문자열 보간법)각주 1 Show me what you got처럼 너의 실력/진짜 모습을 보여줘라~의 의미↩2 Charge ahead : 돌진하다↩3 Shiny object syndrome : 지나치게 많은 아이디어나 최신 유행을 따르다가 그 어느 것도 제대로 완성하지 못하고 시간과 돈을 낭비하는 현상↩4 사전적의미로는 통합 날짜이지만 문맥상 의미로는 정확히 100일이 아니라 사이사이에 복습할 시간을 넣어준 전체 days를 의미하는 것 같습니다.↩" }, { "title": "(100days Of Swfit) Day 1 번역", "url": "/posts/100days_MainPage_day1_ko/", "categories": "IOS, 100days Of Swfit - Days N", "tags": "ios, (100days Of Swfit) Day 1", "date": "2022-02-01 01:01:00 +0900", "snippet": "First steps in swiftMark Twain이 말했던 것처럼 “앞서 가는 비결은 시작하는 것입니다”자, 당신은 이제 시작했으니, 변수(Variables), 상수(Constants), 간단한 데이터 타입에 대해 알아보도록 하겠습니다.오늘 당신이 시청할 8개의 1분짜리 동영상이 있습니다.만약 각주제에 대해 더 깊게 탐구하길 원한다면 추가적인 자료가 있지만 만약 당신이 원하지 않는다면 읽을 필요가 없습니다.어쨌든, 당신이 각 주제를 끝내고 나면 배웠던 내용에 대해 확실하게 이해했는지 도움이 되는 짧은 퀴즈가 있습니다.저도 압니다 : 아래에 링크 된 것보다 더 많은 퀴즈들을 풀고 더 많은 동영상을 시청하고 싶은 유혹은 강한 것은 알지만, 명심하세요 : 서두르지 마세요 ! 틈새가 큰 덩어리보다 매일 하루에 1시간씩 하는게 훨씬 낫습니다. Variables Optional: Why does Swift have variables? Test: Variables Strings and integers Optional: Why is Swift a type-safe language? Test: Strings and integers Multi-line strings Optional: Why does Swift need multi-line strings? Test: Multi-line strings Doubles and Booleans Optional: Why does Swift need both Doubles and Integers? Test: Doubles and Booleans String interpolation Optional: Why does Swift have string interpolation? Test: String interpolation Constants Optional: Why does Swift have constants as well as variables? Test: Constants Type annotations Optional: Why does Swift have type annotations? Test: Type annotations Simple types: Summary Test: Simple types 🏠Main page 돌아가기" }, { "title": "Mac M1용 VScode 설치 &amp; 터미널에서 code로 열기", "url": "/posts/Mac_M1_VScode_install&_terminalOpen_Ko/", "categories": "Environment setting, Mac M1", "tags": "Mac, M1, M1 pro, Apple silicon, VScode", "date": "2022-01-01 00:00:05 +0900", "snippet": "1. VScode 설치방법VScode는 개발자들이 필수적으로 쓰는 IDE의 한 종류일 겁니다.Window만 사용하다 M1으로 전향했으므로 VScode를 다운로드 해주겠습니다.(저처럼 Window를 사용하다 처음 맥북을 써보시는 분들 기준으로 글을 쓰겠습니다. )VScode 다운로드 방법은 크게 2가지 입니다. A. 맥북용 패키지관리자인 Homebrew를 사용해 터미널로 다운로드 하기 B. 공식홈페이지에서 Apple Silicon용 download하기2. 설치A. Homebrew를 통한 설치먼저 A는 빠르고 간단합니다.다만 Homebrew를 모르시는 분들이 있을 수 있으므로 링크의 제 글을 참고해주세요 ➡️Homebrew설치Homebrew설치가 끝났다면 터미널 상에서 아래의 한 줄을 입력해주면 설치가 완료됩니다.(brew는 —-cask는 기본으로 되어있어도 생략해도 되나 그냥 써줬습니다.)brew install --cask visual-studio-codeB. 공식홈페이지에서 Apple Silicon용 DownloadB는 homebrew를 설치하기 싫으실 경우 직접 홈페이지에서 다운로드 방법입니다.구글에서 vscode를 검색 후 홈페이지를 들어가면 우상단에 Download늘 눌러줍니다.그러면 Aplle silicon용 download가 있습니다.이것을 다운로드 해줍니다. 다운로드 압축풀어주고 실행해주면 됩니다. VScode가 열리면 아래처럼 초기 설정에 필요한 설정을 해주고 실행하시면 됩니다.사실상 VScode를 설치하는 데 큰 어려움은 없으나 M1용 프로그램을 다운받아야된다~가 중요 포인트입니다.3. 터미널에서 code로 열기 설정Window의 경우 cmd에서 VScode를 열 수 있는데 이것을 맥북에 적용하는 방법입니다.왜 window에서는 자동으로 되는데 Mac에서는 따로 설정해줘야하는지가 궁금하신 분들은 여기를 보세요 💡 여기 Visual Studio Code를 터미널에서 실행하기 위해서는 code 명령어의 PATH 설정을 해야합니다. 윈도우의 경우 인스톨러로 설치할 때 PATH 설정을 진행합니다만, 맥에서는 단순히 복사만으로 설치가 되기 때문에 PATH가 기본적으로 설정되어있지 않습니다. 윈도우에서도 PATH 설정을 체크하지 않았다면 code 명령어를 사용할 수 없습니다. - 출처 이 글에서는 Mac에 code 명령어를 PATH에 추가하고 터미널에서 실행하는 방법에 대해서 알아봅니다.먼저 위에서의 설명과 같이 Path를 잡지 않았다면 Mac터미널 상에서 code를 입력했을 때 아래와 같이 not found가 나옵니다.이제 Path설정을 해주겠습니다. cmd + shift + p를 눌러주고 생겨난 빈칸에 code를 입력해 줍니다. Shell Commnad: install ‘code’~~~ 부분을 클릭해줍니다.그럼 아래처럼 나오는데 ok를 눌러줍니다. 일련의 과정들을 물 흐르듯 ok와 확인을 눌러줍니다. Successfully installed in Path라고 하니 터미널을 열어 code -v를 입력해보겠습니다.정상적으로 버전이 나오고 code만 입력하면 VScode가 오픈됩니다.💡 Tipcode {실행할 폴더명} # 이렇게 입력하면 해당 폴더경로로 VScode가 열립니다." }, { "title": "SSH key발급 &amp; Password없이 접속(vscode, window &amp; ubuntu)", "url": "/posts/SSH_server_NoPassword_Access(vscode_window&ubutu_ko)/", "categories": "Environment setting, Window", "tags": "Window, Ubuntu, SSH", "date": "2022-01-01 00:00:03 +0900", "snippet": "SSH key 발급 및 Password 등록순서일반적으로 연구나 개발(단체소속)을 하시는 분들은 ssh 서버에 접속해서 각종 작업을 하는 경우가 많이 있습니다. 보통 이런 작업들은 하나의 자산이기때문에 보안 문제로 Password를 설정해놓습니다. 그래서 매번 작업을 할 때마다 Password를 입력해줘야하는데 초기설정으로 번거롭게 Password를 매번 입력하는 일을 없애보겠습니다.해줘야할 일은 크게 3가지로 나뉩니다. local ( 서버가 아닌 본인 pc)의 ssh-key 발급 발급된 ssh-key 파일은 ssh서버에 등록 local에서 ssh서버로 접속할 때 설정해주는 config 파일에 key파일정보기재(config 파일 안에 key파일을 기재해주면 너한테 등록한 내 key파일은 여깄어~라고 알려주게 되고 우리가 직접 Password를 매번 입력하지않아도 된다..) 1. Local의 ssh-key 발급 (공통)먼저 작성자는 Window, Vscode에서 진행하였습니다.아래에세 window powershell을 사용하는 데 명령어만 다를 뿐 우분투의 경우도 동일하게 key 발급 후아래순서대로 진행하면 됩니다. ssh-key를 발급해봅시다.1-A. Window ssh key발급Window 💻 window Window powerShell 을 열어줍니다. ssh-key 발급을 위한 명령어를 입력해줍니다. ( Enter입력하라고 나오면 그냥 해주면됩니다.)아래는 명령어&amp;amp; 설명입니다. ssh-keygen -t rsa -b 4096########## 설명################## -t 옵션 =&amp;gt; 암호화 타입 설정# ssh는 public key 방식으로 동작할 수 있는 여러가지의 암호화 알고리즘을 사용하고 있습니다.# 일반적으로 사용하는 rsa타입으로 설정하도록 하겠습니다.############################ -b 옵션 =&amp;gt; 생성할 key의 bit수를 지정# 각 암호화 타입마다 필요한 비트수가 다릅니다.# rsa 타입은 최소 768 비트가 필요하고 default로 2048 비트로 설정되어 있습니다.# 여기서는 두 배 큰 4096으로 더 견고한 키를 만들겠습니다.# (일반적으로 ssh-key할때 4096으로 많이 하기도 한다.)############################ 옵션에 대한 설명은 # https://storycompiler.tistory.com/112 을 참고하였습니다. key발급은 private &amp;amp; public으로 이루어지는데 정상적으로 이루어지면C:\\Users\\{Window 사용계정명}\\.ssh에 key 발급이 이루어집니다.우리가 서버에 복사해줄 key는 public key입니다. C:\\Users\\{Window 사용계정명}/.ssh/id_rsa.pub#이 public key입니다. 1-B. Ubuntu ssh key 발급 🖥 Ubuntu 우분투의 경우 현재 사용하고 있는 환경이 없어 글로만 설명합니다.ssh-key 발급을 위한 명령어를 입력해줍니다.( Enter입력하라고 나오면 그냥 해주면됩니다.)아래는 명령어&amp;amp; 설명입니다. ssh-keygen -t rsa -b 4096########## 설명################## -t 옵션 =&amp;gt; 암호화 타입 설정# ssh는 public key 방식으로 동작할 수 있는 여러가지의 암호화 알고리즘을 사용하고 있습니다.# 일반적으로 사용하는 rsa타입으로 설정하도록 하겠습니다.############################ -b 옵션 =&amp;gt; 생성할 key의 bit수를 지정# 각 암호화 타입마다 필요한 비트수가 다릅니다.# rsa 타입은 최소 768 비트가 필요하고 default로 2048 비트로 설정되어 있습니다.# 여기서는 두 배 큰 4096으로 더 견고한 키를 만들겠습니다.# (일반적으로 ssh-key할때 4096으로 많이 하기도 한다.)############################ 옵션에 대한 설명은 # https://storycompiler.tistory.com/112 을 참고하였습니다. 정상적으로 발급시 ls ~/.ssh/# 위의 경로에 없다면 사용중인 ubuntu의 사용자계정명의 폴더에서 찾아주세요 # 보통 사용자계정명 밑에 .ssh파일에 key들이 생깁니다.# id_rsa 와 id_rsa.pub 가 생겼다면 정상적으로 발급된 것입니다. 여기서 id_rsa와 id_rsa.pub 2개가 생겼는데 각 private key와 public key입니다. ✏️ SSH 간략 개념글ssh, public&amp;amp;private key개념글은 나중에 쓸테지만 간략하게 알고싶다면 아래를 읽어주세요 💾 설명 ssh key는 public / private 으로 발급됩니다. public : key의 암호화를 진행 (~./ssh/id_rsa.pub 으로 생성) private : key의 복호화를 진행 (~./ssh/id_rsa 으로 생성) public과 private가 key발급시 암호화 (public ) → 복호화 (private)이렇게 한쌍으로 이루어집니다.🔥private은 절대 외부에 유출하면 안됩니다.🔥 그럼 이 key들로 어떻게 서버와 passwword입력없이 통신을 하게 하느냐?우리 local (개인사용 pc) = 클라이언트( Client) 컴퓨터라고 해보겠습니다. 통신을 원하는 서버 컴퓨터에 클라이언트의 public key를 저장한다. 클라이언트 컴퓨터가 접속요청을 할 때 요청을 받는 서버컴퓨터에 저장된public key와 접속요청을 한 컴퓨터의 public key가 동일한지 확인한다 동일하면 클라이언트 컴퓨터에서 보낸 암호문을 private key로 복호화해 평서문으로 변환한다 ⇒이게 우리가 보는 일반적인 글자들( 위에서 언급했듯이 public과 private은 한쌍으로 만들어지기 때문에 public key가같은방식이면 private key로 복호화해 보냈던 내용과 동일하게 동일 수 있는 것입니다.) 아래는 위의 내용을 그림으로 도식화해 제작한 것입니다. 2. ssh 서버에 key 정보 등록 💻 Window 이제 public key를 서버의 ~/.ssh/authorized_keys 안에 내용을 바꿔주면 됩니다.할 수 있는 방법에는 여러가지가 있습니다.(어차피 복사하여 넣는다는 건 같습니다) 첫번째. CLI방식으로 scp을 사용하여 서버로 직접 파일대체두번째. window powershell에서 Get-Content .\\.ssh\\id_rsa.pub 입력후 내용복사하여 대체 두번째 방법 Get-Content .\\.ssh\\id_rsa.pub 을 입력하면 key값들이 쭉 뜰거고 이거를 복사해서 아래 서버 key값등록절차를 진행하면 된다. 세번째. GUI 방식으로 직접 파일을 확인하고 복사하여 대체 제일 쉬운 3번째 방식으로 진행하겠습니다. 전 window사용계정명이 PC 이기때문에 pc아래에 .ssh볼더에 id_rsa.pub이 만들어져 있습니다.만약 사용자 계정명 폴더를 들어가는 방법을 모르신다면로컬디스크(C:) → 사용자 → 사용자계정명 폴더 → .ssh폴더 로 이동하시면 됩니다.id_rsa.pub 파일을 메모장으로 열어주면 안에 내용이 있고 이 내용을 복사해줍니다. 이제 복사한 내용을 붙여넣기 해주기위해서 서버에 접속합니다. 접속 후 단축키 Ctrl + k,O 을 누르거나 왼쪽 상단 파일 → 폴더열기 를 클릭하여 줍니다. 그럼 home/사용자계정명 밑에 .ssh폴더로 들어갑니다. authorized_keys 파일안에 key값들이 있을 텐데 이걸 로컬에서 복사한 내용으로 바꿔줍니다.(authorized_keys 파일이 없을 경우 그냥 만들어주면 됩니다) 🖥 Ubuntu 이제 public key를 서버의 ~/.ssh/authorized_keys 안에 내용을 바꿔주면 됩니다.할 수 있는 방법에는 여러가지가 있습니다. (어차피 복사하여 넣는다는 건 같습니다) 직접 열어서 복사 scp로 파일 전송하여 key 정보등록 공개키자체 내용복사하여 추가 위의 3번째 방식으로 진행해보겠습니다. cat ~/.ssh/id_rsa.pub# public key값 내용 복사 이제 복사한 내용을 붙여넣기 해주기위해서 서버에 접속합니다.(사실 CLI로 해야하는데 위의 window내용을 작성하다 진이빠져 GUI방식으로 진행이되었습니다.어차피 복사한 내용 붙여넣는 내용이니 같다고 보시면 됩니다.) 접속 후 단축키 Ctrl + k,O 을 누르거나 왼쪽 상단 파일 → 폴더열기 를 클릭하여 줍니다. 그럼 home/사용자계정명 밑에 .ssh폴더로 들어갑니다. authorized_keys 파일안에 key값들이 있을 텐데 이걸 로컬에서 복사한 내용으로 바꿔줍니다.(authorized_keys 파일이 없을 경우 그냥 만들어주면 됩니다) 3. Local config에 key파일 정보기재 (공통)이제 서버에 접속요청을 할 때 Local의 public key값 파일이 서버가 알 수 있도록Local의 config파일에 private key값 위치를 적어줍니다.사진은 window라 C:\\User\\{pc(사용자계정명)}\\.ssh\\config 에 위치했지만 ubuntu도 마찬가지의사용자계정명의 아래의 config를 찾아줍니다.해당 config를 열면 IdentityFile정보가 없을 텐데 이 부분에 private key값인 id_rsa 위치를 추가해줍니다. (public이 아닌 private key값인 id_rsa 를 적어줘야합니다. id_rsa .pub아닙니다!)이 상태로 저장하고 다시 ssh 서버에 접속하면 비밀번호를 입력하지않고 자동으로 접속이 가능해집니다." }, { "title": "Mac M1 Xcode 설치(App Store 말고!!)", "url": "/posts/Mac_M1_-Xcode_install(Not_in_App-Store!!)_ko/", "categories": "Environment setting, Mac M1", "tags": "Mac, M1, M1 pro, Apple silicon, Xcode", "date": "2022-01-01 00:00:03 +0900", "snippet": "window에서 넘어온 mac으로 넘어온 가장 큰 이유는 ios개발을 위해서는 mac을 사용해야하는 것이었기 때문에 ios개발에 필요한 Apple macOS 전용 IDE인 Xcode를 설치해보도록 하겠습니다.사실 App store에 검색만하면 Xcode가 있는데 왜 굳이 이런글을 쓸까 싶을 수도 있는데 xcode 설치로 구글링을 조금만 해보면 알 수 있습니다. 아래는 Xcode 설치를 검색해본 것인데 App store를 통해 설치를 하는 것이 얼마나많은 장애(?)가 있는지 선배개발자님들의 고생이 보입니다.그래서 여러 글을 탐독한 결과 App store가 아닌 Apple developer사이트에서 직접다운받는 것이 제일 좋다고 하여 그 방법으로 진행해보겠습니다.여기 로 들어가서 Develop -&amp;gt; Downloads를 클릭해줍니다.(저는 이미 들어가서 화면이 살짝 다를 수 있으나 홈페이지 상단에 Develop을 누르면 같은 화면으로 나타납니다)그럼 아래와 같이 현재 날짜 기준 2021/12/12 최신버전 Xcode 13.2 RC 다운로드가 나오게 됩니다.해당버전으로 다운받아 진행해도 무리는 없습니다 (Xcode 13버전의 경우 Big Sur 11.3 이상의 버전에만 동작합니다. 버전이 11.이하의 os 일 경우 업데이트하고 진행하주시는 게 좋습니다.) Tip 13.2RC 의 의미가 궁금하신 분들만 보세요 The term “Release Candidate” (RC) replaces “GM seed” and indicates this version is near final. 라는 의미를 간단히 설명하자면 RC(Release Candidate) 직역하면 출시후보(최종 릴리즈)버전입니다. 정식 출시전 마지막 베타버전을 보통 RC라고 칭합니다. 이 단계에서 버그가 발견되지 않을 경우 바로 출시를 준비합니다.GM은 Golden Master의 약자로 최종판 이라고 이해하면 됩니다.아래는 소프트웨어의 배포주기 입니다. 따라서 위의 13.2RC버전은 딱히 버그가 발견되지않으면 그대로 GM으로 대체 되고 추후 정식배포판이 될 확률 이 높습니다. 출처 : 소프트웨어 배포 생명주기 /GM의 의미 만약 Beta버전들에 지독한 경험이 있어서 stable 버전을 원한다면 위의 창에서 More버튼을 눌러줍니다.그럼 Apple에서 다운받을 수 있는 여러가지가 나오는데 여기에 Xcode를 입력해 검색해주고 마음에 드는 Stable버전을 다운받아 줍니다.저는 13.2RC 버전으로 다운로드를 진행했습니다.용량이 10GB이기 때문에 15~20분 정도 소요되었습니다.xip은 Extract in Place의 약자라고 합니다 zip형식의 파일과 비슷하다고 하니 토막상식으로 알려드립니다.파일을 눌러 압축을 풀어줍니다.정상적으로 압축이 풀렸으면 xcode를 실행해줍니다Xcode가 정상적으로 설치되었습니다." }, { "title": "Mac M1 github 연결하기", "url": "/posts/Mac_m1_github_connect_ko/", "categories": "Environment setting, Mac M1", "tags": "Mac, M1, M1 pro, Apple silicon, github", "date": "2022-01-01 00:00:02 +0900", "snippet": "Github 인증방식의 변경글 작성에 앞서 이 글은 github의 기본적인 작동(?)순서를 알고 있다고 가정하고 설명을 진행합니다.(git설치가 되어있어야되므로 안되어 있으신 분들은 제 이전 글을 참고하세요.)모르시는 분들은 이 링크(링크1, 링크2)의 순서를 참고하세요.순서만 알고 내용을 따라하지는 말으시길 권장합니다 그 이유가 있습니다.그 이유는 2021년 8월 13일부터 github에 Push할 때 인증방법이 바뀌었습니다.이전에는 Password로 인증을 진행한 후 push가 가능했지만 이제는 PAT(Personal Access Token) SSH key2가지로만 가능합니다. 그래서 21년 8월 기준으로 이전 글들을 보시고 따라하시면 push할 때 오류가 생깁니다. 아래는 기존에 사용하던 Password방식으로 인증했을 때 나오는 문구입니다. 공식 github에서 인증방식 변경에 관한 글remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.fatal: unable to access &#39;https://github.com/userName/repoName.git/&#39;: The requested URL returned error: 403SSH 연결각각의 방식에 대한 장단점은 아래처럼 정리해 볼 수 있습니다.(실제로 하나의 Mac에서 여러 github을 사용할 경우 ssh를 사용하여 할 수 있습니다.)출처이 글에서는 ssh key 기준으로 github을 연결해보겠습니다.(token이 편하신 분들을 위해 글 맨 마지막 하단에 잘 설명되어있는 링크들 달아 놓겠습니다.) 공식 Docs에 나와있는 ssh key 연결 방법입니다. ssh key 연결방법이 영어로 나와 있으므로 불편하실 분들을 위해 저의 방식대로 정리해보겠습니다. 큰 개념인 ssh key 인증방식이 무엇인지 ? ssh key 발급 방법 (ed25519 ,rsa) 발급받은 ssh key를 github에 등록하기 github에 등록된 키와 통신을 위한 Local (Mac) 설정 연결확인을 위한 Test순으로 진행하겠습니다.(본인이 이미 진행하신 부분이 있다면 다음부터 보시면 됩니다.)1. SSH key란??ssh의 개념은 파고들면 복잡해지기 때문에 간단히 설명해놓은 제 글 링크를 첨부합니다.좀 더 알고 싶은신분들은 아래 영상을 참고하세요 📁 생활코딩님의 참고영상 ssh key발급에 앞서 기존에 본인도 모르게 key를 발급받은 적이 있을 수 있으므로 발급된 key가 있나 확인해봅니다.ssh key는 보통 ~/.ssh 위치에 저장됩니다. 터미널을 열어 ls(파일목록) 을 보면 .경로는 숨겨지기 때문에 ls -al로 조회해보겠습니다. -al 옵션을 주면 보이게 되는 .경로들에 ssh항목이 없으므로 ssh key가 발급된 적이 없는 것으로 확인됩니다.이렇게 보아도 되고 cd ~/.ssh 로 이동해서 id_rsa와 id_rsa.pub 의 파일쌍을 확인해도 됩니다.현재는 .ssh경로가 없습니다.2. ssh key 발급방법 (ed25519, rsa)ssh key 파일이 없으므로 발급을 받아주겠습니다. ssh key 발급방식에는 여러 옵션이 있습니다. dsa,ecdsa,ed25519,rsa,rsa1등저는 암호학 전문가가 아니므로 보통 많이 쓰이는 ed25519와 rsa방식만 알고 있습니다.일반적으로 ed25519가 지원하면 사용하고 지원하지않으면 rsa방식을 사용하기도 하고 각각의 장단점이 있다.(출처는 다양한 분들의 의견이 있지만 좀 더 차이를 비교해주신 이 분의 글이 신빙성이 있어보인다.)요즘 ed25519를 왠만하면 지원하기도 하고 github공식사이트에서도 가급적 ed25519방식으로 안내하므로 ed25519방식으로 생성하겠습니다. (rsa 방식도 크게 다르지 않기 때문에 설명은 같이 달아두겠습니다.)ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot; # ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;# 여기서 e-mail은 github가입 이메일을 넣어주세요 # rsa 쓰실분은 위에코드 사용하여 만들면 됩니다. ########## 설명################## -t 옵션 =&amp;gt; 암호화 타입 설정# ssh는 public key 방식으로 동작할 수 있는 여러가지의 암호화 알고리즘을 사용하고 있습니다.# 위에서 설명한 이유들로 저는 ed25519로 설정하도록 하겠습니다.############################ rsa의 -b 옵션 =&amp;gt; 생성할 key의 bit수를 지정# 각 암호화 타입마다 필요한 비트수가 다릅니다.# rsa 타입은 최소 768 비트가 필요하고 default로 2048 비트로 설정되어 있습니다.# 여기서는 두 배 큰 4096으로 더 견고한 키를 만들겠습니다.# (일반적으로 ssh-key할때 4096으로 많이 하기도 한다.)############################-C는 주석을 입력할 수 있습니다.#주석은 서버에 따라 특별한 용도로 사용할 수 있습니다.#github에서는 사용자의 로그인 ID를 적어놓으라고 가이드합니다.############################## 옵션에 대한 설명은 # https://storycompiler.tistory.com/112 을 참고하였습니다.위의 코드를 터미널에 입력해주면 중간중간 물어보는 게 나옵니다. 어디 경로에 그리고 이름은 뭘로 만들거야? Enter file in which to save the key (/Users/계정명/.ssh/ ~~ 비밀번호는 따로 설정할거야? Enter passphrase (empty for no passphrase): ~~2-1 한번더 입력해줘1번의 경우 Enter(Mac이므로 return키)를 입력하면 기본경로에 생성되고 2번의 경우 따로 비밀번호 설정 안 할 경우 동일하게 Enter(return)을 입력해주면 됩니다.(github에서는 비밀번호를 권장하지만 저는 그냥 귀찮음의 문제로 하지 않았으나 중요한게 많으신 분들은 나중에라도 지정이 가능하니 설정하는 걸 추천드립니다.)그래서 모두 다 입력하면 아래처럼 다 만들어 졌다고 나옵니다.잘 생성되었는지 터미널을 열어 ls -al로 확인해주면 기존에는 없던 .ssh 경로가 생성되었고 그 안에 파일이 있는 것을 볼 수 있습니다.ssh 경로로 이동해보면 id_ed25519 (private key)와 id_ed25519.pub (public key) 2가지가 생성되었음을 알 수 있습니다.(public key와 private key내용이 궁금하신 분들은 위에 설명을 달아놓은 ssh key동작방식을 읽어보세요 )만약 ed25519 방식으로 Key를 만들어 주었다면 id_ed25519 와 id_ed25519.pub 두 개가 마찬가지로 생성됩니다.3. 발급받은 ssh key를 github에 등록이제 github에 접속할 때 인증을 위해 우리 local(MacOS)의 private key(id_ed25519)와 맞춰볼 public key(id_ed25519.pub)를 github에 등록해주겠습니다.pubic key내용을 pbcopy 명령어를 통해 클립보드에 복사하겠습니다.pbcopy &amp;lt; ~/.ssh/id_ed25519.pub# 마찬가지로 rsa로 발급 하셨을 땐 아래와 같이 해주면 됩니다.# pbcopy &amp;lt; ~/.ssh/id_rsa.pub위처럼 복사한 후 github 홈페이지에 접속해 아래의 경로로 이동해줍니다.Github의 Settings ➡️ SSH and GPG keys ➡️ New SSH key Title에는 본인이 적고 싶은 것 / Key값에는 위의 pbcopy로 복사해온 내용을 적어주면 됩니다. ( key값 마지막에 e-mail이 있어야지 github에서 권장하는 내용인데 위의 ssh key발급옵션에서 -C값을 정상적으로 주셨다면 key값에 잘 생성되어 있을 겁니다.)Add SSH Key버튼을 눌러주면정상적으로 등록되었습니다.사실 공개키라 뭐 보여줘도 상관없겠지만 가려주니 한층 비밀스럽게 되었습니다.4. github에 등록된 key와 통신을 위한 Local(Mac) SSH 설정먼저 ssh key통신을 위한 접속 설정 방법에는 크게 두가지가 있습니다. A. ~/.ssh/cofig에 명시적으로 private key값의 정보와 사용자정보(호스트명 ,사용자이름정보 등)을 적어서    서버와 통신시 자동으로 인증하는 방법.B. ssh-agent에 private key를 등록해서 ssh-agent가 서버와 접속시 자동으로 public key를 인증하는 방법이 글에서는 config파일을 명시적으로 작성해줘서 인증하는 방법으로 진행하겠습니다.(github에 여러개의 계정을 사용할 때 이 방법을 사용하는 것을 추천합니다.)위에서 github에 Public Key를 정상적으로 등록했다면 Local(Mac)이 서버(github)와 서로 key를 맞춰볼 때 아래의 순서입니다. local ( 서버가 아닌 본인 pc)의 ssh-key 발급 (public, private) 발급된 ssh key (Public key)파일은 ssh서버(github)에 등록 local에서 ssh서버로 접속할 때 설정해주는 config 파일에 key파일정보기재 (config 파일 안에 key파일을 기재해주면 너한테 등록한 내 key파일은 여깄어~라고 알려주게 되고 인증이 된다.)~./ssh/config 파일을 따로 설정해준 적이 없다면 해당 경로에 만들어줍니다.vi ~/.ssh/config# vim으로 열면 [i]를 입력해서 입력모드에 들어갑니다.# 아래 정보 입력 후 [esc] 를 눌러 명령모드 상태로 들어간 후 [:wq]으로 저장 후 종료####### 본인계정 정보# Host github.com-sup \\{여러개의 github계정을 사용하시는 분이 아니라면 그냥 github도 상관없습니다\\}# HostName github.com# User git# IdentityFile ~/.ssh/id_ed25519 \\{private key파일 위치를 적어주세요\\}# Host : 접속할 정보의 이름입니다. 입력한 정보로 ssh 접속 시 $ssh host명 명령 시 아래 접속 정보로 ssh 접속이 실행됩니다.# HostName : 접속할 서버의 IP 주소입니다.# User : 접속할 서버의 user 정보입니다.# IdentityFile : 인증 키파일이 필요한 경우, 로컬환경의 키파일 경로를 설정합니다. 키파일이 필요 없는 서버의 경우 생략 가능합니다.# Port : ssh 접속 포트입니다. 생략 가능하며, 생략 시 기본 22번 포트로 실행됩니다.# 출처:[https://ibks-platform.tistory.com/113](https://ibks-platform.tistory.com/113) 저는 현재 새로 환경설정을 세팅하고 있기때문에 git config설정을 따로 해주겠습니다만(git config user.name&amp;amp;email)이미 되어있으신분들은 remote주소 설정을 해주시면 됩니다. (저같은경우는 여러개의 깃헙계정으로 접속하는 상황을 염두해주었기때문에 remote를 Host명인 github.com-sup로 지정해주었습니다. 여러개의 github계정을 사용하는 경우 당연히 ssh key도 여러개를 발급받기 때문에 Host에 적힌 내용으로 구분해줍니다.)git remote add origin git@github.com-sup:Suppppppp/suppppppp.github.io.git# User@ Host : 실제 연결할 github repository5. 연결확인을 위한 Test연결이 잘 되었는지 테스트를 해보겠습니다.ssh -T git@github.com-sup # User@Host로 입력해주면됩니다.여기서 yes입력해주면 됩니다. 입력해주면 이렇게 successfully authenticated 라는 문구를 보면 성공입니다.이제 특정 repository를 clone해주겠습니다.(이미 git repo가 있는 것을 가정하고 있으므로 없으신분들은 git repo를 만드시면됩니다.) ⚙️ git repository가 없을 경우 cd *git사용 원하는 폴더로 이동*git initgit remote add origin *git 주소*git add .git commit -m &quot;The first commit&quot; git push -u origin master 만약 ssh config설정 시 Host을 github.com으로 했다면 아래처럼 원하는 repo에 ssh부분을 복사하면 됩니다.그러나 저는 ssh로 여러 github계정을 접속하는 것을 염두해둔 상태로 ssh config를 구성했으므로 Host가 github.com이 아닌 github.com-sup이므로 해당부분을 수정해서 clone을 해주겠습니다.git clone git@github.com-sup:repository url # User@ Host : Repo.git 입니다.# 근데 -sup이없어도 github으로 되긴합니다.정상적으로 연결이 되었습니다. push가 잘 되는지 test라는 내용의 README.md를 만들어 push해보겠습니다.echo &#39;test&#39; &amp;gt; README.mdgit add .git commit -m &quot;Test README&quot;git push origin master정상적으로 push가 되었음을 확인했습니다.사실 코드만 적으면 금방 완료될 글이지만 그래도 왜 하는지는 알고 해야한다는 게 제 생각이라 처음으로 github에 ssh연결하시는 분들이라면 도움이 되셨으면 좋겠습니다.살펴본 블로그들의 링크를 아래 달아놓겠습니다. 내용은 다 비슷합니다.혹시나 제가 모르는 게 있을까봐 일부러 많이 블로그들을 살펴봤습니다.틀린 내용이 있을 경우 댓글로 남겨주시면 감사드리겠고 또한 지금까지 읽어주신 분들 감사드립니다.참고 📚 ref https://www.lainyzine.com/ko/article/creating-ssh-key-for-github/https://medium.com/@sunnkis/github-ssh-를-활용하여-여러-계정-관리-방법-7ec29bd0186dhttps://velog.io/@igotoo/github-접속을-https에서-ssh-접속으로-변경하기https://triplexlab.tistory.com/105https://bbaktaeho-95.tistory.com/101https://jintelli.tistory.com/34https://cfdf.tistory.com/20https://cresumerjang.github.io/2020/11/15/multiple-GitHub-accounts-on-a-single-machine-with-SSH-keys/ 📚 token방식으로 github연결 글 링크 token 방법 공식 docs (영어버전 한국어버전은 없습니다)⬇️개인블로그https://hyeo-noo.tistory.com/184https://curryyou.tistory.com/344https://velog.io/@jini_eun/Github-2021년-8월-13일부터-토큰-인증-로그인-변화https://developer0809.tistory.com/148 " }, { "title": "Mac M1에 git 설치하기", "url": "/posts/Mac_M1_git-install_ko/", "categories": "Environment setting, Mac M1", "tags": "Mac, M1, M1 pro, Apple silicon, git", "date": "2022-01-01 00:00:01 +0900", "snippet": "Window에서 M1으로 넘어오고 하나씩 필수적인 것들을 설치하고 있는데 이번엔 git을 설치하겠습니다.git은 먼저 Homebrew를 통하여 설치하는 것을 추천드립니다.Homebrew라는 것을 설치하기 싫으실 분이 계실 수도 있는데 아래의 사진에서처럼 공식홈페이지에서도Homebrew를 설치하라고 말하고 있으니 안정적인 멘탈유지를 위해 시키는대로 설치 해줍니다.설치방법은 예전에 작성한 설치글을 링크로 남겨드립니다. Homebrew 설치(참고로 IOS개발을 위한 IDE인 Xcode를 설치할 경우는 사진에 나와있듯이 git이 자동으로 설치됩니다.내장이 올바른 표현일 수도 있겠습니다. 그렇기 떄문에 이미 Xcode부터 설치하신분이라면 터미널에 git —version을 입력하시면 자신도 모르는 git이 이미 설치되어 있을 수 있습니다.)Homebrew를 설치하였다면 git 공식 홈페이지에서 안내하는대로 Homebrew를 사용하여 설치해줍니다.brew install git터미널에 git —version을 입력해보면 정상적으로 설치가 되었습니다.github 연결은 다음 글을 참고해주세요.다음글" }, { "title": "Mac M1 Homebrew 설치", "url": "/posts/Mac_m1_Homebrew_Install_ko/", "categories": "Environment setting, Mac M1", "tags": "Mac, M1, M1 pro, Apple silicon, Homebrew", "date": "2022-01-01 00:00:00 +0900", "snippet": "Mac m1 Homebrew 설치window만 열심히 사용해오던 저는 MacBook m1 pro를 구입했습니다.　정말.. 정말 윈도우랑 많이 달라서 열심히 적응해 나가는 중에 개발환경세팅을 위해 많은 글들을 찾아보았는데 그 중 필수적으로 깔아야하는게 Homebrew라고 합니다. 일반적으로 Apple생태계에서 프로그램 설치는 App store에서 설치 또는 해당 프로그램 사이트에 직접 방문하여 다운로드 받아 파일로 설치인데 Homebrew는 이것을 터미널에서 가능하게 해주고 각종 패키지를 관리할 수 있는 좋은 프로그램입니다. (파이썬 유저라면 pip install 느낌으로 생각하시면 될 것 같습니다.)Apple Silicon( 흔히 말하는 m1)용 Homebrew는 2021년 2월 경 3.0.0부터 정식지원한다고 발표했기 때문에글을 쓰는 현재 (21년 12월 12일)버전은 따로 고민해줄 필요없이 홈페이지에서 다운받아 진행해주면 됩니다. 구글링을 해보니 예전 Homebrew버전(3.0.0미만)을 m1용 으로 사용하려면 Rosetta 2를 사용해 인텔버전으로 사용하는 방법으로 했던 것 같습니다. 현재 홈페이지 최신버전을 설치해본 결과 구글링하면 나오는 Homebrew의 문제점이 발생하지 않으니 m1의 경우 그대로 진행하셔도 무방할 듯 합니다.이상의 설명은 거두절미하고 Homebrew를 설치해보겠습니다.https://brew.sh/ 공식 홈페이지로 들어가줍니다.들어가게 되면 언어가 english로 되어있는데 한국어로 변경이 가능하니 불편하신 분들은 바꿔주시면 되겠습니다.Install Homebrew 아래의 명령어가 있는데 맨 오른쪽 버튼을 누르면 자동으로 복사가 됩니다. 이 복사된 내용을 터미널에 입력해줍니다.터미널은 spotlight(Cmd+Space bar)로 터미널을 검색하면 들어갈 수 있습니다. 붙여넣기는 Cmd + V 입니다.입력하고 리턴(엔터)를 눌러주면 아래처럼 mac 관리자 패스워드를 입력해주라고 나옵니다다시 리턴키를 눌러주면 아래처럼 진행됩니다. 몇 분정도가 소요되니 기다려주세요중간에 이렇게 비빌번호를 입력해달라고 나옵니다. 다시입력해줍니다.설치가 완료되면 아래처럼 나옵니다.그런데 Warning부분을 읽어보면 Path가 문제가 있다고 알려줍니다.그래서 Next step에 있는 Path를 그대로 복사해서 입력후 리턴(엔터)을 눌러줍니다위의 작업들이 정상적으로 끝났다면 아래와 같이 다시 터미널을 켜고 Homebrew버전을 확인해줍니다.정상적으로 Homebrew설치를 마쳤습니다. 참고homebrew path관련 자세한 설명이 궁금하신 분들은 아래 블로그를 참고하시면 됩니다.Path참고" }, { "title": "로그변환과 np.log()가 아닌 np.log1p()를 하는 이유", "url": "/posts/Why-Series-MDM-1/", "categories": "Why Series, ML DL Math", "tags": "why np.log1p(), why log transformation", "date": "2021-12-31 18:00:00 +0900", "snippet": "1.로그변환의 이유위와 같은 로그 함수의 특징은 다음과 같습니다. \\(0&amp;lt; x &amp;lt;1\\) 범위에서는 기울기가 매우 가파릅니다.즉, \\(x\\)의 구간은 \\((0,1)\\)로 매우 짧은 반면, \\(y\\)의 구간은 \\((-∞,0)\\)으로 매우 큽니다. 따라서 \\(0\\)에 가깝게 모여있는 값들이 \\(x\\)로 입력되면, 그 함수값인 \\(y\\) 값들은 매우 큰 범위로 벌어지게 됩니다.즉, 로그함수는 \\(0\\)에 가까운 값들이 조밀하게 모여있는 입력값을 넓은 범위로 펼칠 수 있는 특징을 가집니다. 반면, \\(x\\)값이 점점 커짐에 따라 로그함수의 기울기는 급격히 작아집니다.이는 곧 큰 \\(x\\)값들에 대해서는 \\(y\\)값이 크게 차이나지 않게 된다는 뜻이고 이에 따라서 넓은 범위를 가지는 \\(x\\)를 비교적 작은 \\(y\\)값의 구간 내에 모이게 하는 특징을 가집니다. 그렇기에 결과적으로 데이터의 분포를 모았을 때 밀집되어 있는 부분은 퍼지게퍼져있는 부분은 모아지게 만들 수 있는 것입니다. 위와 같은 특성 때문에 한 쪽으로 몰려있는 분포에 로그 변환을 취하게 되면 넓게 퍼질 수 있는 것이죠.왜 한쪽으로 치우친 분포를 로그 변환을 취하게 되면 정규분포 모양으로 고르게 분포하게 될 수 있는지 이해가되었으면 왜 numpy 로그변환에서 np.log()가 아닌 np.log1()을 사용하는 이유에 대해 알아보겠습니다.2. np.log()가 아닌 np.log1p()인 이유로그함수의 경우 위의 자연로그 함수 그래프를 보면 알겠지만, \\(x = 0\\) 인 경우 \\(y\\)가 -무한대(-infinite)의 값을 가집니다.아래의 Out[2]번에 보면 NumPy 에 \\(0\\)이 포함된 배열을 np.log() 함수에 대입하면 ‘RuntimeWarning: divide by zero encountered in log’ 라는 경고메시지가 뜨고, -inf 가 포함된 배열을 반환하게 됩니다. \\(x\\)가 \\(0\\)의 값을 가지면 무한대가 되므로 당연한 결과입니다. 이를 해결하기 위한 방법으로 \\(x + 1\\)을 해줘서\\(0\\) \\(1\\) 으로 바꿔주면 문제가 없게 됩니다. np.log1p() 함수가 바로 이 역할을 해주는 함수입니다.그러면 \\(y\\)값이 -inf⇒ \\(0\\)으로 바뀌게 되죠.마찬가지의 방법으로 np.log(1+값)을 해주면 np.log1p()와 같은 값을 얻을 수 있습니다. np.log1p() np.log(1+값) 하지만 변환 전의 값이 너무 작은 경우 컴퓨터 계산의 오류가 생기기 때문에 직접 \\(+1\\) 을 해주는 것이 아닌 np.log1p()을 사용하는 습관을 들이는 게 좋을 것입니다. np.log1p() np.log(1+값) " }, { "title": "About Why Series", "url": "/posts/Why-Series-about-copy/", "categories": "Why Series, About the Why Series", "tags": "About the Why Series", "date": "2021-12-31 18:00:00 +0900", "snippet": "Introduction평소 어떤 것을 공부하던 책에 있는 내용을 배우다가 어? 이 부분은 왜 이렇게 되는 거지 ? 라고 생각이 들 때가한 번씩은 모두 있으실 거라고 생각합니다. 이 카테고리는 바로 그런 내용들을 정리하고 Why로 시작한 내용을so that reason why ~ 로 정리하며 기록하는 공간입니다.스스로에게 질문을 질문을 던졌던 내용을 정리하지 않으면 같은 내용을 봐도 기억하지 못할 수 있고 이 기록이 저와 같은 고민을 하시는 분들에게 조금의 도움이라도 될 수 있길 바랍니다.Point of caution나름 강하게 주의사항이라고 목차를 적긴했습니다. 그 이유는 제 글이 우연히 찾의시던 의문과 같아 글을 보고 무조건적인 정답이라고 생각하실까봐 걱정이 되어서 적었습니다.저도 물론 글을 작성할 때 여러 정보를 찾아보며 작성하지만 제가 잘못 알 수도 있고, 참고한 글이 잘못되었을 수도 있습니다. 그렇기 때문에 제 글만 보지마시고 다른분들의 여러 글들도 함께 보며 판단하시는게 좋은 결론에 다다르는 길일 것입니다.물론 제가 작성한 글 중 틀린내용이 있다면 이메일 : u1316@daum.net로 메일주시거나 댓글을 달아주시면 감사하겠습니다." }, { "title": "(CS50) 1주차 - 컴퓨팅사고", "url": "/posts/Class-CS50-coaching-study-first/", "categories": "Computer Science, CS50 coaching study", "tags": "CS50, boostcourse, computer Thinking, binary system, Digital signal", "date": "2021-12-31 15:00:00 +0900", "snippet": "IntroductionCS50의 첫주차가 시작되었다. 모두를 위한 컴퓨터 과학 (CS50 2019)의 첫번째 챕터는 컴퓨팅 사고이다.강의를 보셨다면 알겠지만 데이비드 말린(David Malan)교수님께서 굉장히 굉장히 열정적으로 가르치신다.내용도 재밌고 짧은 시간으로 구성되어 있어서 집중이 잘 되는 것 같다. (부스트코스기준)영어가 편하신분들은 원본 수업영상으로 보시는 게 나을 수 있습니다. CS50 chap.1 youtube2진법 (Binary system)“What is Computer Science?” =&amp;gt; 문제를 해결하는 과정이라는 말로 포문을 여셨다.문제를 해결하는데 앞서 기계들을 사용할 때 입력과 출력에 대해 어떻게 표현할지 정하는 컴퓨터과학의 첫번째 개념은 바로 정보자체의 표현방법이다.사람들은 0~10까지라는 숫자를 이용해 수를 표현하는데 반해 컴퓨터는 0과 1로 밖에 받아들이지 못한다.이는 binary system(2진법)이라고도 불리는데 이 0과 1를 가지고 컴퓨터는 숫자뿐만아니라 글자,사진,영상,소리등 많은 것을 저장할 수 있다.우리는 123이라는 것을 보았을때 자동적으로 (100x 1) + (10 x 2) + (1 x 3)계산하여 단순한 숫자 1,2,3의 나열이 아닌 123(백이십삼)으로 인식한다. 123(백이십삼) 이라면 위의 사진의 100의 자리에 1, 10의 자리에는 2, 1의 자리에는 3이 들어갈 것이다. 9에서 10을 넘어갈때 재밌는 현상이 나타나는데![image-3(/assets/img/Computer_Science/cs50/1/3.png){: width=”30%” height=”30%”}{: .center}9 -&amp;gt; 10으로 넘어갈떄 자리가 표시하는 자리가 바뀌게 된다.즉, 우리가 사용하는 10진수라는 것은 0~9까지의 숫자로 각 자리수 10n자리에 표시하는 것이다.우리가이렇게 당연하게 여기는 체계는 어떤 숫자든 같은 방법으로 나타낼 수 있고 이 방법을 바탕으로 2진법에도 적용할 수 있다. 우리가 보기에는 010으로 10진법 기준이라면 010(십)으로 볼 수 있으나 2진법을 기준으로 본다면 21 x 1이기 때문에 2라는 숫자를 010으로 표현하는 것이다. (10진법은 9를 넘으면 자리가 바뀌어 표시했던 것처럼 2진법은 0~1범위로 1을 넘은 숫자를 표기할 수 없다.) 이렇게 컴퓨터는 2진수로 숫자를 나타낼 수 있는데 숫자는 2,4등 이런작은 숫자들만 있는게 아닌 큰 숫자들을 표현하기 위해 더 많은 0과 1이 필요하다 (EX. 215 x 1를 표현하면 1000000000000000와 같이 많은 0과 1이 필요)우리는 이를 비트라고 부른다. 비트는 단지 binary의 0과1을 의미한다고 보면된다.자, 이제 2진법이라는 건 알았는데 이게왜 컴퓨터와 연관이 있는가 ?컴퓨터는 기본적으로 전기를 가지고 구동되는 기계이다. 유일한 자원이 전기인 것이다.이 전기를 가지고 Trun on { 0 } / Trun off { 1 }로 나타내어 2진법을 표현할 수 있는 것이다. 이것을 바탕으로 수많은 비트를 가지고 정보를 표현하는 것이다.비트가 늘어남에따라 많은 비트를 부르는 용어가 각각 생겼는데 Byte의 경우 8bit를 의미한다. 8자리의 [xxxxxxx] x에 각각 0과 1이 표시될 수 있는데 각 x는 전기를 사용해 Off/On로 0과 1를 표현한다. 각 bit의 on/off를 표현할 수 있는 아주 작은 전기 스위치를 트랜지스터라고 하는데 오늘날 컴퓨터는 수백만,수십억개의 트랜스터를 가지고 있다. 이들을 물리적으로 이용해서 정보를 표현하고 값을 저장하는 것이다. Ex.) 50이라는 숫자가 있다면 00110010으로 표현하고 1이 들어가있는 자리에 트랜지스터 각각에 아주 조금의 전기를 저장해서 숫자 50을 나타내는 것이다. boostcourse에서 제공하는 자료 2진법 학습자료 pdf 비트와 바이트 학습자료 pdf정보의 표현지금까지 어떻게 숫자를 표현할 수 있는 지에 대해 알아봤다. 그러나 우리가 살고 있는 세계는 숫자로만 정보를 전달 할 수 없다. 그렇다면 메일, 문자들 같은 글자들은 어떻게 보낼 수 있는가 ? Trun on과 Trun off로 작동하는 트랜지스터를 활용해 어떻게 On,Off로 나타낼 수 있는가 ?우리가 서로간의 약속을 하면 될 것이다. 1은 A를 2는 B를 의미한다고 !물론 실제로 1이 A를 의미하지는 않는다. 실제 A를 의미하는 것은 65이다. 문자나 메일같은 걸로 A라는 글자를 수신받았다면 우리는 0과 1의 패턴으로 표현된 65란 숫자를 받는 것이다.이렇게 문자를 숫자로 표현할 수 있도록 정해진 표준이 있는데 그 중 하나가 ASCII(아스키코드/American Standard Code for Information Interchange)이다.기본 ASCII코드는 총 128(27)개의 부호로 정의되어 있고 알파벳은 아래와같이 약속되어 있다.위의 표를 보면 의문이 들지 모른다. 알파벳은 소,대문자 통틀어 52개밖에 없는데 나머지76개는 뭐지? 라고 말이다. 알파벳을 채우고 남은 나머지공간에는 ! ? ,등과 같은 기호를 표현하는 문자로 채워져있다.기본 ASCII코드에서 나아간 것이 확장 ASCII코드인데 총 256(28)개를 표현 할 수 있다.강의에서 나온 예제를 봐보도록하자72 73 33라는 숫자를 받았다면 이것이 의미하는 것은 HI!이다.그렇다면 83 85 80 80 80 80 80 80 80 46 71 73 84 72 85 66 46 73 79 는 무엇을 의미할까 ? 바로 이 블로그의 주소인 suppppppp.github.io이다.이런 ASCII는 미국편향적,영어편향적이다. 다른언어들도 많고 이모티콘도 많기 때문이다.이모티콘 같은 것들은 사진같지만 키보드를 통해 입력한다. 실제로 알파벳으로 이루어진 기호에 불과하다. 이모티콘을 나타내는 0과1의 패턴도 있다.그것이 바로 유니코드(Unicode)로 ASCII의 상위집합과 같다.확장 ASCII는 당시 8비트(28=256)만 사용했고 이는 문자들을 사용하기에 충분하지 않았다. 유니코드는 8,16,24 혹은 32비트까지도 사용하므로 훨씬더 많은 0과1의 패턴을 표현할 수 있고 이모티콘도 가능하다. 이 기쁨 눈물 이모지를 표현하는 숫자는 128,514 이다 (십진수로) 이진수로 표현하면 11111011000000010 (참고로 ASCII의 128개의 문자와 유니코드의 초기 128개는 동일하므로 서로 호환가능하다.)모바일을 예로 들면 우리가 누군가에게 기쁨 눈물 이모지를 보내면 숫자로 표현되는 코드를 보내는거고 그럼 그것을 전달받은 안드로이드나 ios가 기쁨 눈물 이모지로 표현하는 것이다.물론 이모티콘 자체는 이미지이고 컴퓨터에서의 이미지는 수많은 작은 점들로 구성되어 있다. 저 기쁨 눈물 이모지 또한 각각의 점들로 이루어진 이미지인 것이다.이미지를 구성하는 각각의 점들은 RGB체계에 의해 표현된다. (Red, Green, Blue) 옛날 사람들은 색깔을 나타기위해 0과 1만 사용하면 된다는 데 모두 동의했고 어떤 숫자가 어떤 색깔을 나타낼지를 정했다. 이를 위해서 색 체계가 필요하고 우리가 사용하는 RGB체계가 나온것이다.왜 RGB체계를 택했나를 이야기해보자면 무지개는 색들을 모두 포함하고 있는데 이 무지개에 있는 색들은 Red, Green, Blue 3가지 색조합만으로 이루어졌다는 게 밝혀졌고 이 3가지를 잘 조합하면 무지개 내의 모든 색들을 표현할 수 있었기 때문이다.그래서 이 각 3가지 RGB의 숫자들이 얼만큼 각 색을 사용하여 화면상에 점을 표현할 것인지 알려주게된다.포토샵등의 프로그램들은 72 73 33 이런 패턴을 숫자로 해석해서 HI!로 표현하는대신에 RGB값으로 받아들인다. 72만큼의 R 73만큼의 G 33만큼의 B 를 섞으면 아래와 같은 색이나오고 　　　　　　　　　　　　이 색이 바로 기쁨 눈물 이미지의 얼굴색이다.인터넷의 동영상이나 gif 같이 움직이는 것처럼 보이는 것들은 단순히 여러장의 사진들이다. 한 이미지뒤에 다음 이미지를 빠르게 나타내서 움직이는 것처럼 보이는 것이다. 바로 위의 기쁨 눈물 이모지 또한 여러장의 사진을 붙여 만든 gif에 불과하고 사진이 넘어가는 간격사이를 더욱 많은 사진들로 채워주고 사진-&amp;gt;사진 넘어가는 속도를 조절해주면 동영상으로 변하게 되는것이다.이것들이 오늘날 컴퓨터가 정보를 표현하는 거의 모든 방법이다 0과 1을 사용해서 2진수를 나타내고 이를통해 10진수를 사용하여 화면상의 글자나 색깔을 나타내고 더 나아가 영상까지 만드는 것아날로그(Analog) to 디지털(Digital) 변환강의에서 소리같은 아날로그(Analog) 신호를 디지털(Digital)로 변환하는 방법에 대해서 자세히 나오지는 않았지만 개인적으로 찾아보았다.아날로그 =&amp;gt; 디지털 변환은 총 3가지 단계로 이루어진다. 1단계 표본화 : 구간별 컷팅 (sampling)　　　　　　Continuous 한 연속 신호를 discrete (이산적인) 신호인 불연속 신호로 변환한다.　　　　　　자연적으로 발생하는 소리는 기계처럼 배! 고! 파! 끊겨서 소리가 들리지않는다.　　　　　　소리가 배고파~이렇게 들리는데 신호적측면에서 보면 연속적인 신호라고 본다.　　　　　　이 신호를 x축에 수직으로 잘라준다. 아래그림에서는 주황색선으로 표현했고 　　　　　　원래는 저것들 보다 훨~~씬 잘게 잘라준다. 편의상 몇 개만 그렸다.　　　　　　이렇게 연속적인 신호를 이산적인 신호로 잘라주는게 샘플링(sampling)이라고 한다. 2단계 양자화 : 구간별로 자른 소리의 크기를 표현할 수 있는 근사값으로 변환한다.　　　　　　이제는 소리의 크기를 측정할 차례다. 구간별로 자른 부분은 소리의 크기를 가지게 되는데　　　　　　이때 7.9, 4.3, 2.1의 크기는 8, 4, 2 같은 근사값으로 보내준다.　　　　　　이 근사값들의 범위가 1이 아닌 0.5, 0.1 단위로 세세한 소리의 크기를 저장 할 수 있다면　　　　　　이게 바로 음질이 좋아지는 것이라고 볼 수 있다.　　　　　　(근사값을 더 작데 보내고 + 구간을 더 잘게 쪼개면 음질이 좋아진다.) 3단계 부호화 : 위에서 만들어준 근사값 8, 4, 2를 1000, 0100, 0010의 2진법으로 바꾸는 양자화 과정을 거쳐　　　　　　아날로그 신호를 코드(2진법)인 디지털신호로 변환하여 컴퓨터에 입력된다.아 모든 것들에서 결국 말하고자 하는것은 어떤 방법을 사용해서 정보를 나타내든 결국 0과 1로 표현된다. boostcourse에서 제공하는 자료 ASCII 학습자료 pdf알고리즘이제 입력을 나타내는 방법에 대해 얘기했으니 출력에 대해 이야기해보자어떻게 입력으로부터 출력을 얻을 수 있을까?　　이 부분이 컴퓨터과학 중 알고리즘 사용되는 곳이다What is 알고리즘 ?우리는 요즘 매체등을 통해 알고리즘이란 단어를 주위에서 많이 본다.알고리즘이란, 문제해결 관점에서 바라본다면 알고리즘은 그저 문제를 해결하는 단계적 방법일 뿐이다.원하는 문제를 풀기위해서는 어떤알고리즘을 사용해야할까 ?오래된 문제인 전화번호부 책 문제로 예를 들어보자.나는 전화번호부를 사용해봤던 세대라 어떻게 전화번호부책이 이루어져있는지 알지만 모르시는 분들이 있을 수 있으니 설명해보자면 우리나라 기준으로 ㄱ부터 ㅎ까지 이름(상호명이던 개인이던)순으로 번호가 적혀져있다.이 강의에서는 미국의 예제니까 당연히 A-Z의 순서일것이다. 요즘 핸드폰에 있는 전화번호부기능과 이와 마찬가지이다. 연락처에 들어가면 이름의 순서대로 연락처가 있으니 말이다. 전화번호부 책과 핸드폰 연락처 기능이 같은 구성으로 이루어져있다는 걸 알았으니 그럼 우리가 누군가의 연락처를 찾을때 어떤 방법을 사용해서 찾을 수 있을까?강의에서 나오는 예처럼 Mike Smith라는 이름을 찾는다고 가정해보자 ( 처음에 강의를 볼 때 한국식으로 생각해서 당연히 M부터 찾는 것이라고 생각했는데 강의를 듣다보면 S를 찾는 내용으로 설명한다.그래서 미국이니까 성이 Smith이고 S부터 찾는다고 이해했다. 만약 S부터 찾지않아도 M을 찾는것으로 대입해서 이해해도 방법론적 내용이므로 무리는 없을 것이다.)첫번째 방법으로 아주 심플하게 첫번째장부터 찾는 Mike Smith란 이름이 있는지 찾아나가는 방법이 있다.한 장씩, 한 장씩 펼쳐가며 S페이지에 도착할 것이다. 이런것이 알고리즘이다. 문제 해결을 위한 Step by Step process ! 알고리즘이라는 것은 무엇인지 알았고 이 알고리즘은 올바른가?라고 묻는다면 올바르긴하나 매우 느리고 안좋은 방법이라고 말할 수 있을 것이다. Mike Smith를 찾는데 수백장을 넘겨야할지도 모르기 때문에 첫번째 장부터 찾아나가는 것은 너무나 비효율적이기 때문이다. 그럼 두번째 방법으로 책을 넘기는 장수를 2배로 늘린다면?? ex) 2,4,6,8,10알고리즘은 올바른가?라고 질문하면 당연히 아니다 속도는 2배 빨라질지 모르나 홀수번째 페이지에 Mike Smith가 있다면 제대로된 검색이 이루어지지 않을것이다. 물론 약간만 수정하면 찾기도 가능하다 A~RSTU~Z 가 알파벳순서니까 T로 넘어갔다면 뒤로 1,2페이지 옮겨서 찾는 방법으로 할 수도 있다. 그러나 이 역시 책 페이지가 1,000장이 넘는 것처럼 찾아야할 페이지가 큰 수로 있는 경우 여전히 몇 백번을 실행해야한다. 첫번째 방법보다는 2배빨라졌으나 여전히 느린것이다. 그럼 어떻게 하는게 좋은방법일까? 실제로 우리가 전화번호부책이나 원하는 내용을 찾는 방법을 떠올려보자.(책 목차가 기재되어 있지않은 경우를 바탕으로 이야기한다.) 먼저 우리가 찾고자 하는 내용을 정하고 일단 책을 펼쳐볼 것이다. 그런 다음 펼친 책의 내용과 우리가 찾고자 하는 내용의 선후관계를 따져 찾고자 하는 내용이 펼친 페이지의 앞에 있을경우 앞부분을 찾을것이고,　찾고자 하는 내용이 펼친 페이지의 뒤에 있을경우 뒷부분을 찾을것이다.이를 적용한 세번째 방법으로 Mike Smith의 예제또한 효율적으로 찾을 수 있다. 만약 책의 총 페이지가 1,024라면 중간인 512페이지를 펼쳐 512의 알파벳을 확인하고 해당 페이지 알파벳과 S의 위치를 비교하여 움직일 방향을 정할 수 있을 것이다.　1,024 512 2561286432168421　이렇게 10단계안에 우리가 원하는 페이지를 찾을 수 있다.반면 첫번째 방법은 몇 단계나 거칠까? S의 위치에따라 다르겠으나 A-Z순서중 후반부에 있으므로 적어도 6,700번이상은 진행할 것이다. 최악의경우 1,024에 가까운 페이지를 봐야될 수 있다.(T부터 시작하는 사람,상호명이 없을 경우) 두번째 방법은 첫번째 방법보다 반정도 횟수를 줄일 수 있으나 최소 400번이상은 봐야한다.이렇듯 알고리즘은 우리가 기본적으로 생각할 수 있는 직관이나 생각들을 어떤 문제해결을 위해 기계나 다른사람들이 이해할 수 있는 방식으로 표현하는 것이다. 그럼 알고리즘은 무엇인지 이제 이해가 되었는데..어떤 알고리즘이 더 좋은 알고리즘인지는 어떻게 알 수 있을까 ? 아래의 그림을 봐보자( X축 : 문제의 크기 , Y축 : 문제해결에 걸린시간 )를 각각나타낸다. 우리가 했던 전화번호부 책 문제를 대입해보면X축은 전화번호부페이지의 수가 많아질수록 오른쪽으로Y축은 페이지를 넘기는 시간(횟수)이 길어질수록 위로 올라가는 것이다.빨간색으로 표시된 선은 첫번째 알고리즘을 표현한 것이며 전화번화부 페이지 수 탐색과 소요시간(횟수) 사이의 비를 1:1관계로 보여준다. 기울기는 1인 직선으로 그려진다.노란색으로 표시된 선은 두번째 알고리즘을 표현한 것이고 첫번째 알고리즘보다 2배 빠르게 탐색하므로 소요시간은 1/2일 것이고 기울기가 1/2인 직선으로 그려진다.이걸 보면 같은페이지라도 두번째 방법(노란선)이 첫번째 방법(빨간선)에 비해 2배 빠르다는 것을 알 수 있다.그렇다면 세번째 알고리즘은 어떨까 ? 세번째 방법의 경우 \\(\\log n\\)의 그래프가 그려지는데 (\\(\\log\\)함수는 잘 몰라도 상관없다.) 세번째 알고리즘의 진행방법을 보면절반절반절반으로 진행했기때문에 페이지 수가 아무리 커져도 해결시간에 거의 영향을 주지않는다는 것을 \\(\\log n\\)의 그래프를 보면 알 수 있다.예를들어 1,024의 페이지가 16배로 늘어난다고 가정해보자 (계산과정 단순화를 위해 2의 배수로 진행했다.)1024 x 16 = 16,384 이다. 1,024보다 무려 15,360페이지나 많아졌기때문에 첫번째,두번째방법은 오랜시간이 소요하겠으나 세번째 방법의경우16,3848,1924,0962,0481,024512 2561286432168421　총 14번이 소요되었다.1,024 가 10번이 걸린것을 본다면 페이지가 15,360페이지나 증가했음에도 고작 4번의 횟수만 증가한 것이다.Pseudo code이것은 효율성 측면에서 아주 중요한 차이이다. 그럼 이 중요한 직관(생각)을 코드로 나타내 볼 것인데 이를 의사코드 (Pesudo code)라고한다.정확한 정의는 없지만 영어던 어떤 언어든 우리의 생각을 간결하게 정리한 코드와 비슷한 구문을 말한다.Mike Smith를 찾는 알고리즘을 영어 의사코드로 나타낸 사진이다 (강의에서 진행한 사진)단계별로 무엇을 했는지 적고있다. (너무 자세히 적을 필요는 없다. 무엇을 하냐정도만 적는게 중요 )일종의 종속관계가 있다는 걸 확실히 하기위해 들여쓰기로 표시한것들이 있는데예를 들어 Smith가 페이지에 있다는 Line 4가 참(True, 진실)일때만 Line 5로 넘어간다.당연히 Line 4가 참이 아니면 ( Smith가 페이지에 없다면) 펼친 책의 왼쪽에 있을지 오른쪽에 있을지를 체크하는 것을 Line 6, 9에서 체크하고 계속 진행해나가야된다.이걸 어떻게 반복할 수 있을지가 중요한 것인데 Go back to line을 사용해 왼쪽,오른쪽여부를 찾고 Line 3으로 가서 이것을 다시 반복하도록 만들었다.물론 책에 우리가 찾는 Mike smith씨가 없을 수도 있다. 이렇듯 Line 4,6,9 조건에 해당하지않을경우 (Mike Smith가 없을경우) 탐색을 그만둘 수 있도록 만족하는 조건이 없을 경우(Line 12)탐색을 그만둬라(Line 13)라고도 만들어줬다. 이 예시는 의사코드를 영여구문으로 작성하는 한가지 방법이었다.이 의사코드에서 볼 수 있는 몇가지 특징들은 다음주 공부하게될 C나 요즘 자주쓰는 파이썬같은 언어에서도 볼 수 있는데절차적 프로그래밍(procedural programming)이라고 모든 언어들에 공통적으로 존재하는 특징이다.위 사진에서 노란색으로 강조된 부분들을 함수(function)이라고 한다.함수는 컴퓨터에게 (이 경우는 사람에게) 무엇을 해야할지 알려주는 역할을 한다.위 사진에서 노란색으로 강조된 부분들은 조건(condition)이라고한다. 여러 선택지중 특정 하나를 위해 설정하는 역할을 한다.하나를 선택하는 결정을 내리기위해서는 조건의 내용이 필요한데 아래와 같이 설정한다.이처럼 노란색으로 표시된 조건의 내용은 불리언 표현(boolean, 참-거짓)이라고 한다.답이 예 (True, 참) - 아니오 (False, 거짓) 으로 나오는 0 또는 1로 나오는 질문을 뜻한다.(일반적으로 True는 1을 False는 0을 뜻한다.)마지막으로 Go back 즉 다시 돌아가서 반복해야하는 것들을 루프(loop)라고 한다.어떤 일을 계속 반복해야할때 쓴다.함수,조건,불리언, 루프 외에도 다양한 것들이 있다. (변수variables, 쓰레드threads, 이벤트events)이것들을 사용해서 다음 강의부터 의사코드방식이 아닌 실제 프로그래밍 언어로 다뤄볼 것이다. boostcourse에서 제공하는 자료 알고리즘 학습자료.pdf추가적으로 라면 끓이는 방법을 의사코드(Pseudo code)로 표현해보았다. 준비물 :라면, 건더기스프, 양념스프, 수도꼭지, 라면냄비, 가스레인지, 젓가락, 계란,1. 라면냄비를 집는다 2. 라면냄비에 수도꼭지를 틀어 물을 넣는다.3. if 짜게 먹는다면 then 500ml를 넣는다. 4. else if 싱겁게 먹는다면 then 600ml를 넣는다5. else 평범하게 먹는다면 then 550ml를 넣는다.6. 수도꼭지를 잠근다.7. 라면냄비를 가스레인지에 올려놓고 and 불을 켠다.8. while 물이끓지않는다.9. 기다린다.10. 라면을 뜯고 양념스프 and 건더기스프를 먼저 넣고 and 면을 넣는다.11. 뚜겅을 닫는다.10. while 기다린시간이 1분이 넘지 않았다.11. 기다린다.12. 뚜껑을 열고 and 젓가락으로 면을 들었다 놓았다를 반복한다.13. if 달걀을 먹는다면 then 계란을 깨서 넣는다.14. if 탁한 국물을 좋아한다면 then 계란을 젓가락으로 풀어버린다.15. else if 맑은 국물을 좋아한다면 then 계란이 익을때까지 기다린다.16. 불을 끊다.17. 라면을 맛잇게 먹는다 " }, { "title": "네이버 부스트코스 CS50 코칭스터디 2기 OT", "url": "/posts/Class-CS50-coaching-study-OT/", "categories": "Computer Science, CS50 coaching study", "tags": "CS50, boostcourse", "date": "2021-12-31 15:00:00 +0900", "snippet": "Introduction본인은 비전공자다. 빅데이터와 AI에 흥미를 느껴 공부를 시작했지만 내 지식의 경계는 ML &amp;amp; DL &amp;amp; MAth &amp;amp; Statistics 를 넘어갈 일이 없었다. (그렇다고 저것들을 잘하는 것도 아닌데…) 앞의 내용들을 깊게 공부하다보면 컴퓨터라는 것 자체에 대해 알아야하는 일이 필수적으로 생긴다.난 그럴때마다 구글링을 해서 글을보면 무조건 마지막으로 내려서 어떻게 조치해야되는지만 보았다.내용은 봐도 이해할 수 없으니까.. 그래서 비슷한 문제가 일어나도 늘 같은 과정을 되풀이 했다. 이런 반복되는 일 속에서 CS기초 강의 중 정말 유명한 하버드대의 CS50강의를 네이버 부스트 코스에서코칭+스터디 형식으로 제공해주는 프로그램 참여자를 모집중에 있어 절대 놓칠 수 없다는 생각으로 지원했다.평소 부스트코스에서 제공되는 강의를 많이 참고하고 주위에 널리 전파하고 다녔던 본인인지라 다시 한번 부스트코스의 evangelist가 되었다..ㅎㅎHow to apply for CS50 coaching study부스트 코스에 접속하면 아래와 같이 페이지가 있는데 신청하기를 누르면 짧은 링크가 그곳에 들어가면 몇가지 질문들이 나온다.지원한 지 3주가 지나 질문들을 잊어버려서 자세히 쓸 수는 없지만 주로 지원동기와 이것을 끝까지 진행할 수 있는지 의지를 묻는 질문들이 많았다. 그리고 간단한 영상을 시청 후 퀴즈(?)를 내는데 내용은 중학생 아이들도 영상을 본다면 풀 수 있을 정도의 간단한 수준이었다.지원할 때는 리드 부스터와 부스터를 나눠서 지원할 수 있는데 아무래도 조별 그룹을 이루고 코칭을 받는 스터디이다 보니 운영진측과 스터디원들 사이의 정보를 전달하고 스터디원들간의 커뮤니케이션을 촉진시킬 수 있는 역할이 리드부스터라고 생각이 되었다. 물론 나는 CS에 대해 정말 컴공과 학부 신입생과 다를 바 없이 무지하지만 (학부신입생이 더 나을 수 있을 것 같다..) 나 스스로 이 스터디로 얻어가고 싶은 것이 많았기에 못먹어도 Go! 정신으로 리드 부스터에 지원했다.사실 지원하고 뛰어나신 분들이 많이 지원했을 것 같아 괜히 리드부스터에 지원했나… 떨어진거 거 아니야?…걱정을 많이 했는데 운이 좋게도 합격 메일을 받아 마음 편히 치킨을 시켜먹었다. A notice of acceptance합격여부는 메일로 왔다. 31일 모집마감이고 연휴가 껴 있어서 연락은 1월6일에 받았다.영업일기준 2일 소요에 받은거니 빠르게 지원자들을 보시고 메일을 주신 것 같았다.메일내용에는 OT내용을 확인할 것, 수업구성등의 간략한 내용이 있었다.메일을 받은 시점은 1월 6일이였고 스터디 수강승인은 1월 7일에 된다고 하여서 하루정도 기다린 뒤 OT내용등을 확인했다.How the class goes6주간 진행될 스터디 진행방식은 이랬다.[공통] 매주 월요일 오전 9시 풀어야할 미션이 공개 매주 목요일까지 미션제출 매주 금요일 오후 8시 라이브 특강 수강[개별] 코치님께 미션 제출 &amp;amp; 질문내용을 보니 월요일 오전 발표되는 미션에 대한 내용은 지난 금요일에 수강한 내용이 바탕이 될 것 같았다.또 미션에 대해 팀원들이 같은 주 목요일까지 미션을 수행하여 제출하고라는 문구와 소속된 팀원 외의 다양한 학습자와의 적극적인 소통을 지향합니다.라는 문구를 보아 미션에 대해 서로 토의하면서 진행하는 것을 장려하는 분위기인 것 같았다.What I want to accomplish with this study리드 부스터로써 많은 도움을 드리면 좋겠지만 나 스스로도 무지한지라 앞으로 많은 토의를 통해 서로 성장하며 win-win이 되는 스터디가 되었으면 좋겠다." }, { "title": "Portfolio", "url": "/posts/Portfolio/", "categories": "Resume, Portfolio", "tags": "portfolio", "date": "2021-12-31 01:01:00 +0900", "snippet": "Please read누군가 제게 제일 중요한 3가지를 선택하라고 하면 고를 내용에 ⭐️ 을 표시해놨습니다.참고하여 읽어주세요. 아래의 ▶️를 클릭하면 내용이 펼쳐집니다. 이렇게 보입니다 😄각 글들의 ▶️를 클릭해주세요. ⭐️ Start up2021.04 ~ 2021.09 :: FromNode 창업팀 합류 Role : 기획 project의 진행상황을 별로 branch를 만들어 관리하는 협업툴 참여자들의 파일 업로드시 이전 파일과의 변화점을 checking하여 자동으로 알려주는 기능계획 홈페이지 구현 2021.02 ~ 2021.04 :: Pet Doctor 창업 Role : AI 이미지 분석 및 기획 AI이미지 분석으로 반려동물의 대변을 분석해 건강상태를 알려주는 솔루션 병원동물에게 정보제공을 가능케하는 어플리케이션 연동계획 창업관련 컨설팅 참여 교내 창업팀을 대상으로 컨설팅을 받을 수 있는 수업에 참여하였습니다. Paper⭐️ 2020.07 ~ 2021.01 :: Write a paper (Ovaso) Ovaso : Intergrated Binary CNN Models to Classfiy COVID-19, Pneumonia and Healthy Lung in X-ray 현재 첫 번째 revision을 끝냈습니다. (2021.12.31.기준) revision을 준 한 명의 저자에게서는 okay를 받았고 , 나머지 한 명의 저자도 수정된 내용이 반영되면 okay 사인을 준다고 합니다. 아래는 발표영상입니다. Relevant Activities 2019.12 ~ 2020.02 :: Run Deep learning basic program in Modulabs Role : Lecture AI coding을 위한 basic과정 운영 scratch부터 시작하는 code 해설 ⭐️ 2019.11 :: Google developer group Devfest on campus 2019 ML/AI Tutor Role : Tutor AI tutorial을 진행해볼 수 있게 code setting code 해설 작성 진행중 error 수정 및 질문 답변 code_패션 MNIST 이미지 분류하기 code_신경망과의 첫 만남(손글씨 분류) code_뉴스기사 분류 해보기 2019.07 Keras korea 2nd Deep learning conference participation 컨퍼런스 종료 후 2018.08 ~ for a year :: BITAmin (Big data analysis club ) 학회 발표장면 Extracurricular activities A couple of times. :: Won several futsal tournaments 전국체전 풋살부문 우승 " }, { "title": "Mac M1 Github blog를 위한 @1 Jekyll이란?(feat. 블로그 환경세팅을 위한 순서)", "url": "/posts/MacM1-GithubBlog-1/", "categories": "Resume, Blogging", "tags": "Jekyll, Github blog", "date": "2021-01-01 05:00:00 +0900", "snippet": "Mac M1 Github blog를 위한 #1 Jekyll이란? (feat. 블로그 환경세팅을 위한 순서)Macbook M1 pro를 구입 후 여러 개발환경을 세팅하면서 jekyll활용한 블로그 환경도 세팅을 해주는 김에 기록하게 되는 글입니다.아마 이 글을 읽으시는 분들은 2가지 타입이실 것 같습니다. M1에 ruby설치 과정중에 어려움을 겪으신 분들 아예 처음 jekyll을 활용한 블로그를 시도해보시는 분들.이 글은 여러 페이지로 나눠서 작성하고 두 가지를 포괄적으로 합쳐서 쓸 예정이니 필요하신 정보를 잘 보시면 될 것 같습니다.각각의 자세한 설명에 초점을 맞추진 않을 것입니다. 그러나 글을 작성할 때 늘 제 목적은 왜 이것을 해야하는 지 이유를 알아야된다고 생각하기 때문에 실제 동작과 그 이유에 초점을 맞춰 진행하겠습니다.큰 흐름의 순서를 살펴보면, A. Ruby설치 B. Jekyll 과 bundler 설치 C. 사용할 Jekyll 테마 다운로드 D. github에 repository생성 및 Local 폴더에 테마를 github 페이지에 연동Jekyll이란 ?Jekyll이란 말이 자주 나오는데 Jekyll을 구글에 치면 아래처럼 설명이 나옵니다.” Jekyll은 정적 사이트 생성기입니다. GitHub의 공동 설립자인 Tom Preston-Werner가 Ruby로 작성했으며 오픈 소스 MIT 라이선스에 따라 배포됩니다. “ Ruby로 만들어진 정석 사이트 생성기라고 하는것인데 왜 우리가 A.에서 Ruby를 설치해야되는 지가 나옵니다.블로그 페이지를 생성해주는 생성기 자체가 Ruby란 언어로 만들어졌기 때문입니다. 정적 사이트 생성기라면 동적 사이트 생성기가 있다는 생각을 할 수 있는데 각 세부사항의 자세한 설명은 이 글의 목적이 아니므로 간단히 아래에 설명을 달고 넘어가겠습니다.(이후에도 같은방식으로 전개하겠습니다. )출처 : https://titus94.tistory.com/4쉽게 말해 쇼핑몰처럼 우리가 클릭이나 입력처럼 어떤 액션을 취하지 않고 서버와 주고받는 것 없이 고정되어있는 글들을 보는 것만 하는 것은 정적 사이트라고 보시면 됩니다. 이런 정적 사이트를 생성해주는 Jekyll을 사용하기 위해서 위에서 언급해준 것과 같이 Ruby를 설치해줘야합니다.다음 글에서는 Ruby설치방법과 MacOS에서의 원활한 Ruby설치를 위한 프로그램을 알아보겠습니다." }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Resume, Blogging", "tags": "favicon", "date": "2019-08-11 00:34:00 +0900", "snippet": "In Chirpy, the image files of Favicons are placed in assets/img/favicons/. You may need to replace them with your own. So let’s see how to customize these Favicons.With a square image (PNG, JPG or GIF) in hand, open the site Favicon &amp;amp; App Icon Generator and upload your original image.Click button Create Favicon and wait a moment for the website to generate the icons of various sizes automatically.Download the generated package, unzip and delete the following two from the extracted files: browserconfig.xml manifest.jsonNow, copy the remaining image files (.PNG and .ICO) from the extracted .zip file to cover the original files in the folder assets/img/favicons/.The following table helps you understand the changes to the icon file: ✓ means keep, ✗ means delete. File(s) From Favicon &amp;amp; App Icon Generator From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ browserconfig.xml ✗ ✓ manifest.json ✗ ✓ The next time you build the site, the icon will be replaced with a customized edition. 글자색상 https://geniewishescometrue.tistory.com/101 이미지 정렬에 참고할 만한 블로그 이미지 사이즈 및 정렬1 이미지 사이즈 및 조절 2 이미지뿐만 아니라 마크다운 전반적으로 설명 잘되어있는 곳 이미지 텍스트 인라인에 표시방법 ex) 이렇게 표시 &amp;lt;img style=&quot;max-width: 원하는 픽셀값px; vertical-align: middle;&quot; src=&quot;/이미지주소/이미지명.png&quot;&amp;gt; gif 만드는 사이트 " }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Resume, Blogging", "tags": "getting started", "date": "2019-08-09 20:55:00 +0900", "snippet": "InstallationFork Chirpy on GitHub, rename the repository to USERNAME.github.io (where USERNAME is your GitHub username), and then open terminal and clone the fork to local by:$ git clone https://github.com/USERNAME/USERNAME.github.io.git -b master --single-branchSetting up the local envrionmentIf you would like to run or build the project on your local machine, please follow the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll and Bundler.Before running or building for the first time, please complete the installation of the Jekyll plugins. Go to the root directory of project and run:$ bundle installbundle will automatically install all the dependencies specified by Gemfile.Setting up Docker environment (optional)If you’re a loyal fan of Docker or just too lazy to install the packages mentioned in Setting up the local envrionment, please make sure you have Docker Engine installed and running, and then get Docker image jekyll/jekyll from Docker Hub by the following command:$ docker pull jekyll/jekyllUsageInitializationGo to the root directory of the project and start initialization:$ bash tools/init.sh Note: If you not intend to deploy it on GitHub Pages, append parameter option --no-gh at the end of the above command.What it does is: Remove some files or directories from your repository: .travis.yml files under _posts folder docs If you use the --no-gh option, the directory .github will be deleted. Otherwise, setup the GitHub Action workflow by removing extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in folder .github. Automatically create a commit to save the changes. ConfigurationGenerally, go to _config.yml and configure the variables as needed. Some of them are typical options: url avatar timezone theme_modeRun LocallyYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sThen open a browser and visit to http://localhost:4000.Run on DockerRun the site on Docker with the following command:$ docker run --rm -it \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveDeploymentBefore the deployment begins, checkout the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base url on a web server other than GitHub Pages, remember to change the baseurl to your project name that starting with a slash. For example, /project.Assuming you have already gone through the initialization, you can now choose ONE of the following methods to deploy your website.Deploy on GitHub PagesFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the Pages service. Push any commit to origin/master to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files. Browse to your repo’s landing page on GitHub and select the branch gh-pages as the publishing source throught Settings → Options → GitHub Pages: Visit your website at the address indicated by GitHub. Deploy on Other PlatformsOn platforms other than GitHub, we cannot enjoy the convenience of GitHub Actions. Therefore, we should build the site locally (or on some other 3rd-party CI platform) and then put the site files on the server.Go to the root of the source project, build your site by:$ JEKYLL_ENV=production bundle exec jekyll bOr, build the site with Docker by:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=&quot;$PWD:/srv/jekyll&quot; \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to your web server." }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Resume, Blogging", "tags": "writing", "date": "2019-08-08 14:10:00 +0900", "snippet": "Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _post/ of the root directory. Please note that the EXTENSION must be one of md and markdown. From v2.4.1, you can create sub-directories under _posts/ to categorize posts.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- Note: The posts’ layout has been set to post by default, so there is no need to add the variable layout in Front Matter block.Timezone of dateIn order to accurately record the release date of a post, you should not only setup the timezone of _config.yml but also provide the the post’s timezone in field date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post is designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:categories: [Animal, Insect]tags: [bee]Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for specific post, add the following to post’s Front Matter:---toc: false---CommentsSimilar to TOC, the Disqus comments is loaded by default in each post, and the global switch is defined by variable comments in file _config.yml . If you want to close the comment for specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown language: surround the graph code with ```mermaidand ```.ImagesPreview imageIf you want to add an image to the top of the post contents, specify the url for the image by:---image: /path/to/image-file---Image captionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_Image sizeYou can specify the width (and height) of a image with width:![Desktop View](/assets/img/resume/blogging/mockup.png){: width=&quot;400&quot;}Image positionBy default, the image is centered, but you can specify the position by using one of class normal , left and right. For example: Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/resume/blogging/mockup.png){: width=&quot;350&quot; class=&quot;normal&quot;} Float to the left ![Desktop View](/assets/img/resume/blogging/mockup.png){: width=&quot;240&quot; class=&quot;left&quot;} Float to the right ![Desktop View](/assets/img/resume/blogging/mockup.png){: width=&quot;240&quot; class=&quot;right&quot;} Limitation: Once you specify the position of an image, it is forbidden to add the image caption.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---Code BlockMarkdown symbols ``` can easily create a code block as following examples.This is a common code snippet, without syntax highlight and line number.Specific LanguageUsing ```language you will get code snippets with line numbers and syntax highlight. Note: The Jekyll style {% highlight LANGUAGE %} or {% highlight LANGUAGE linenos %} are not allowed to be used in this theme !# Yaml code snippetitems: - part_no: A4786 descrip: Water Bucket (Filled) price: 1.47 quantity: 4Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %} .{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack.{% endif %}Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography (문법)", "url": "/posts/text-and-typography/", "categories": "Resume, Blogging", "tags": "typography", "date": "2019-08-08 11:33:00 +0900", "snippet": "이 글은 Chirpy에서 rendering한 마크다운 문법을 보여주며, 예제로 사용해볼 수 있습니다.지금부터, text와 typography을 살펴보겠습니다.Titles (제목)H1 - headingH2 - headingH3 - headingH4 - headingParagraph (문단)나는 구름처럼 외롭게 거닐였다.높은 계곡과 언덕에 떠다니고,사람들을 보자마자,호수 옆 나무 아래 금빛 수선화 한 송이산들바람에 펄럭이며 춤추고 있다.List (목록)Ordered list (순서가 있는 목록) 첫번째 항목 두번째 항목 세번째 항목Unordered list (순서가 없는 목록) 항목 1 하위 항목 1 하위 항목 1 항목 2Block Quote (인용 블럭) This line to shows the Block Quote.Toggle (토글) 💡 토글할 내용 이렇게 내용을 적어줍니다. Toggle in list (목록형태로 토글) 💡 목록형태 토글1 이렇게 내용을 적어줍니다. 💡 목록형태 토글2 이렇게 내용을 적어줍니다. 동해물과 백두산이 마르고 닳도록.Nested Toggle (중첩 토글) 💡 첫번째 토글 중첩할 토글 내용은 다음의 내용입니다. 💡 목록형태로 토글할 내용 이렇게 내용을 적어줍니다. 💡 일반형태로 토글할 내용 이렇게 내용을 적어줍니다. Tables (표) 회사 연락처 국가 Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Table(표)안에 Table(표)생성 방법 - stackoverflowLink (링크)http://127.0.0.1:4000Footnote (각주)Apple1 은 맛있어.맛있으면 Banana2YoutubeYoutube 동영상 삽입에는 여러가지 방법이 있으나 제일 간단한 방법을 적습니다. 마음에 드는 Youtube동영상 화면으로 이동한다. 영상에 공유(share)버튼을 클릭한다. &amp;lt; &amp;gt; 모양의 퍼가기를 눌러준다. 해당 코드를 복사, 붙여넣기한다.&amp;lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fLexgOxsZu0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt; Images (이미지) 기본 (기본 이미지와 밑에 설명추가)전체화면 너비(width)와 센터정렬 특정 너비(width) 설정400px 이미지 너비(width) 왼쪽 정렬 본문 왼쪽에 이미지 삽입 동해물과 백두산이 마르고 닳도록. 동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록. 본문 오른쪽에 이미지 삽입 동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록.동해물과 백두산이 마르고 닳도록. Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dInline code (문장 코드 삽입)Inline Code의 예시입니다.Mathematics (수학 표기)MathJax로 작동합니다.:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]\\(a \\) 가 \\(a \\ne 0\\)일 때,\\(ax^2 + bx + c = 0\\)에는 2가지 해가 있고 그 해는\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Code Snippet (코드 삽입)Common (일반)이 부분은 강조나,line number 문법이 없는 code snippet입니다.Specific Languages (특정 언어)Console$ dateSun Nov 3 15:11:12 CST 2019Terminal$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashRubydef sum_eq_n?(arr, n) return true if arr.empty? &amp;amp;&amp;amp; n == 0 arr.product(arr).reject { |a,b| a == b }.any? { |a,b| a + b == n }endShellif [ $? -ne 0 ]; then echo &quot;The command was not successful.&quot;; #do the needful / exitfi;Liquid{% if product.title contains &#39;Pack&#39; %} This product&#39;s title contains the word Pack.{% endif %}HTML&amp;lt;div class=&quot;sidenav&quot;&amp;gt; &amp;lt;a href=&quot;#contact&quot;&amp;gt;Contact&amp;lt;/a&amp;gt; &amp;lt;button class=&quot;dropdown-btn&quot;&amp;gt;Dropdown &amp;lt;i class=&quot;fa fa-caret-down&quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/button&amp;gt; &amp;lt;div class=&quot;dropdown-container&quot;&amp;gt; &amp;lt;a href=&quot;#&quot;&amp;gt;Link 1&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;#&quot;&amp;gt;Link 2&amp;lt;/a&amp;gt; &amp;lt;a href=&quot;#&quot;&amp;gt;Link 3&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;a href=&quot;#contact&quot;&amp;gt;Search&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;Horizontal Scrolling&amp;lt;div class=&quot;panel-group&quot;&amp;gt; &amp;lt;div class=&quot;panel panel-default&quot;&amp;gt; &amp;lt;div class=&quot;panel-heading&quot; id=&quot;&quot;&amp;gt; &amp;lt;i class=&quot;far fa-folder&quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;p&amp;gt;This is a very long long long long long long long long long long long long long long long long long long long long long line.&amp;lt;/p&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;Reverse Footnote (각주 설명) 1 사과↩2 바나나↩" } ]
